{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Open ABL Project \u00b6 Objective \u00b6 Supply OpenEdge ABL Libraries to extent OpenEdge capabilities. Setup Project (PDSOE) \u00b6 The OpenABL repository is intentionally not setup as a PASOE project. After cloning the repository: Update the project to be a faceted project (Project Properties > Project Facets) Toggle on the OpenEdge Facet (Project Properties > Project Facets) Add src to the PROPATH (Project Properties > Progress OpenEdge > PROPATH) Add gui/ablunit.pl or tty/ablunit.pl to the PROPATH to allow executing the supplied unit tests. Note Its recommended that you Apply and Close between each step above (with the exception of the last two). Source Code \u00b6 Source code for the various libraries can be found in the src folder . Code is organized in two primary folders, abl and test . The abl folder contains the libraries in their most basic form. These libraries should be supported in any ABL application (Linux and Windows). If the libraries require application level implementations to be injected, examples will be found in test . The test folder contains implementations or examples of using the libraries found in abl . Documentation \u00b6 The source of the documentation, found in the doc folder , is written using Markdown and compiled by MkDocs. The compiled documentation is hosted in GitHub pages. How to Contribute \u00b6 Its easy to contribute to the Open ABL Project. You can modify and add libraries by making pull requests or just open an issue.","title":"Home"},{"location":"#open-abl-project","text":"","title":"Open ABL Project"},{"location":"#objective","text":"Supply OpenEdge ABL Libraries to extent OpenEdge capabilities.","title":"Objective"},{"location":"#setup-project-pdsoe","text":"The OpenABL repository is intentionally not setup as a PASOE project. After cloning the repository: Update the project to be a faceted project (Project Properties > Project Facets) Toggle on the OpenEdge Facet (Project Properties > Project Facets) Add src to the PROPATH (Project Properties > Progress OpenEdge > PROPATH) Add gui/ablunit.pl or tty/ablunit.pl to the PROPATH to allow executing the supplied unit tests. Note Its recommended that you Apply and Close between each step above (with the exception of the last two).","title":"Setup Project (PDSOE)"},{"location":"#source-code","text":"Source code for the various libraries can be found in the src folder . Code is organized in two primary folders, abl and test . The abl folder contains the libraries in their most basic form. These libraries should be supported in any ABL application (Linux and Windows). If the libraries require application level implementations to be injected, examples will be found in test . The test folder contains implementations or examples of using the libraries found in abl .","title":"Source Code"},{"location":"#documentation","text":"The source of the documentation, found in the doc folder , is written using Markdown and compiled by MkDocs. The compiled documentation is hosted in GitHub pages.","title":"Documentation"},{"location":"#how-to-contribute","text":"Its easy to contribute to the Open ABL Project. You can modify and add libraries by making pull requests or just open an issue.","title":"How to Contribute"},{"location":"contributing/HowToContribute/","text":"How to Contribute \u00b6 Contributing to Source Code \u00b6 Open a GitHub Issue in the repository to start a discussion. Pull the GitHub Repository and make a pull request with your changes. Code will be reviewed and either merged or rejected with explanation. Contributing to the Documentation \u00b6 Documentation is maintained using the same process as the source code. Open a GitHub Issue in the repository to start a discussion. Pull the GitHub Repository and make a pull request with your changes. Documentation will be reviewed and either merged or rejected with explanation. Once you've pulled the MkDocs and Materials container, pull the GitHub Repository and use the the following commands to preview the site locally in your browser. MacOS/Linux cd /<repo-location> docker run --rm -it -p 8000:8000 -v ${PWD}:/docs squidfunk/mkdocs-material or if using the optional Shortcut Scripts cd /<repo-location> md serve Windows cd /<repo-location> docker run --rm -it -p 8000:8000 -v \"%cd%\":/docs squidfunk/mkdocs-material or if using the optional Shortcut Scripts cd /<repo-location> mk serve","title":"How to Contribute"},{"location":"contributing/HowToContribute/#how-to-contribute","text":"","title":"How to Contribute"},{"location":"contributing/HowToContribute/#contributing-to-source-code","text":"Open a GitHub Issue in the repository to start a discussion. Pull the GitHub Repository and make a pull request with your changes. Code will be reviewed and either merged or rejected with explanation.","title":"Contributing to Source Code"},{"location":"contributing/HowToContribute/#contributing-to-the-documentation","text":"Documentation is maintained using the same process as the source code. Open a GitHub Issue in the repository to start a discussion. Pull the GitHub Repository and make a pull request with your changes. Documentation will be reviewed and either merged or rejected with explanation. Once you've pulled the MkDocs and Materials container, pull the GitHub Repository and use the the following commands to preview the site locally in your browser. MacOS/Linux cd /<repo-location> docker run --rm -it -p 8000:8000 -v ${PWD}:/docs squidfunk/mkdocs-material or if using the optional Shortcut Scripts cd /<repo-location> md serve Windows cd /<repo-location> docker run --rm -it -p 8000:8000 -v \"%cd%\":/docs squidfunk/mkdocs-material or if using the optional Shortcut Scripts cd /<repo-location> mk serve","title":"Contributing to the Documentation"},{"location":"contributing/MkDocsDocker/","text":"MkDocs and Material using Docker \u00b6 MkDocs and Material using Docker containers and commands. Get the Docker Image \u00b6 The official Docker is a great way to get up and running in a few minutes, as it comes with all dependencies pre-installed. Pull the image for the latest version with: docker pull squidfunk/mkdocs-material Verifying MkDocs/Docker Image \u00b6 To verify that the MkDocs/Docker images in the previous step works, you can check the version of MkDocs using the following command: MacOS/Linux docker run --rm -it -v ${PWD}:/docs squidfunk/mkdocs-material --version Results of the call will depend on the version contained in the current Docker container. mkdocs, version 1.1.2 from /usr/local/lib/mkdocs (Python 3.8) Windows docker run --rm -it -v \"%cd%\":/docs squidfunk/mkdocs-material --version Results of the call will depend on the version contained in the current Docker container. mkdocs, version 1.1.2 from c:\\local\\python\\mkdocs (Python 3.8) Creating a New Site \u00b6 You can bootstrap your project documentation using the mkdocs executable. Go to the directory where you want your project to be located and enter: MacOS/Linux docker run --rm -it -v ${PWD}:/docs squidfunk/mkdocs-material new . Windows docker run --rm -it -v \"%cd%\":/docs squidfunk/mkdocs-material new . This will create the following structure: . \u251c\u2500 docs/ \u2502 \u2514\u2500 index.md \u2514\u2500 mkdocs.yml Previewing Documentation as it's Written \u00b6 MkDocs includes a live preview server, so you can preview your changes as you write your documentation. The server will automatically rebuild the site upon saving and reload within the browser. Start it with: MacOS/Linux docker run --rm -it -p 8000:8000 -v ${PWD}:/docs squidfunk/mkdocs-material Windows docker run --rm -it -p 8000:8000 -v \"%cd%\":/docs squidfunk/mkdocs-material Point your browser to http://localhost:8000 to see the compiled documentation. Use CTRL/Control-C to stop the server when done. Building Documentation \u00b6 When you're finished editing, you can build a static site from your Markdown files with: MacOS/Linux docker run --rm -it -v ${PWD}:/docs squidfunk/mkdocs-material build Windows docker run --rm -it -v \"%cd%\":/docs squidfunk/mkdocs-material build The contents of this directory (./site) make up your project documentation. The site can be hosted on GitHub Pages, GitLab Pages, a CDN of your choice or your private web server. Deploy Documentation (GitHub Pages) \u00b6 Manually deploy project documentation invoke the following command from the directory containing the mkdocs.yml file: MacOS/Linux docker run --rm -it -v ~/.ssh:/root/.ssh -v ${PWD}:/docs squidfunk/mkdocs-material gh-deploy --force Windows docker run --rm -it -v ~/.ssh:/root/.ssh -v \"%cd%\":/docs squidfunk/mkdocs-material gh-deploy --force Using Shortcut Script \u00b6 The commands above are verbose and cumbersome to type. To alleviate this pain, scripts can be used to supply shortcuts. Below are scripts for both MacOS and Windows. The scripts can be named whatever is memorable but will need to be adjusted to reflect that name for the help option. The OS specific script needs to be placed in the sessions PATH. These scripts can be expanded or modified to allow more MkDoc features, but the basics are already supplied. MacOS/Linux #!/bin/sh COMMAND=\"$1\" OPTIONS=\"$2 $3 $4 $5 $6\" case $COMMAND in version) docker run --rm -it -v ${PWD}:/docs squidfunk/mkdocs-material --version ;; serve) docker run --rm -it -p 8000:8000 -v ${PWD}:/docs squidfunk/mkdocs-material ;; build) docker run --rm -it -v ${PWD}:/docs squidfunk/mkdocs-material build $OPTIONS ;; deploy) docker run --rm -it -v ~/.ssh:/root/.ssh -v ${PWD}:/docs squidfunk/mkdocs-material gh-deploy --force ;; new) docker run --rm -it -v ${PWD}:/docs squidfunk/mkdocs-material new . ;; * ) echo \"\\033[1mNAME\\033[0m\" echo \" \\033[1mmd\\033[0m - Command shortcut for MkDocs running under Docker\" echo \"\" echo \"\\033[1mSYNOPSIS\\033[0m\" echo \" \\033[1mmd\\033[0m \\033[4mcommand\\033[0m\" echo \"\" echo \"\\033[1mCOMMANDS\\033[0m\" echo \" Supply one of the following commands to:\" echo \" \\033[1mhelp\\033[0m - Display this helpful information\" echo \" \\033[1mversion\\033[0m - Display MkDocs version information\" echo \" \\033[1mserve\\033[0m - Run the built-in development server (http://localhost:8000) for the current directory (control-c will stop the server)\" echo \" \\033[1mbuild\\033[0m - Build the MkDocs documentation in the current directory\" echo \" \\033[1mdeploy\\033[0m - Deploy documentation to GitHub Pages from the current directory\" echo \" \\033[1mnew\\033[0m - Create a new MkDocs project in the current directory\" echo \"\" exit 1 ;; esac Windows @echo off setlocal set OPTION=%1 IF \"%OPTION%\"==\"version\" ( docker run --rm -it -v %cd%:/docs squidfunk/mkdocs-material --version ) ELSE IF \"%OPTION%\"==\"serve\" ( docker run --rm -it -p 8000:8000 -v %cd%:/docs squidfunk/mkdocs-material ) ELSE IF \"%OPTION%\"==\"build\" ( docker run --rm -it -v %cd%:/docs squidfunk/mkdocs-material build ) ELSE IF \"%OPTION%\"==\"deploy\" ( docker run --rm -it -v ~/.ssh:/root/.ssh -v %cd%:/docs squidfunk/mkdocs-material gh-deploy --force ) ELSE IF \"%OPTION%\"==\"new\" ( docker run --rm -it -v %cd%:/docs squidfunk/mkdocs-material new . ) ELSE ( echo NAME echo mk - Command shortcut for MkDocs running under Docker echo. echo SYNOPSIS echo mk option echo. echo OPTIONS echo Supply one of the following options to: echo help - Display this helpful information echo version - Display MkDocs version information echo serve - Run the built-in development server (http://localhost:8000) for the current directory (ctrl-c will stop the server) echo build - Build the MkDocs documentation in the current directory echo deploy - Deploy documentation to GitHub Pages from the current directory echo new - Create a new MkDocs project in the current directory echo. ) goto :eof The following is the syntax to use the scripts defined above. The MacOS version fo the script is named md , however the Windows version is named mk .bat because it confliced with the Windows MD (MKDIR) command. MacOS/Linux NAME md - Command shortcut for MkDocs running under Docker SYNOPSIS md option (e.g. md serve) OPTIONS Supply one of the following options to: help - Display this helpful information version - Display MkDocs version information serve - Run the built-in development server (http://localhost:8000) for the current directory (control-c will stop the server) build - Build the MkDocs documentation in the current directory deploy - Deploy documentation to GitHub Pages from the current directory new - Create a new MkDocs project in the current directory Windows NAME mk - Command shortcut for MkDocs running under Docker SYNOPSIS mk option (e.g. mk serve) OPTIONS Supply one of the following options to: help - Display this helpful information version - Display MkDocs version information serve - Run the built-in development server (http://localhost:8000) for the current directory (control-c will stop the server) build - Build the MkDocs documentation in the current directory deploy - Deploy documentation to GitHub Pages from the current directory new - Create a new MkDocs project in the current directory","title":"MkDocs Docker"},{"location":"contributing/MkDocsDocker/#mkdocs-and-material-using-docker","text":"MkDocs and Material using Docker containers and commands.","title":"MkDocs and Material using Docker"},{"location":"contributing/MkDocsDocker/#get-the-docker-image","text":"The official Docker is a great way to get up and running in a few minutes, as it comes with all dependencies pre-installed. Pull the image for the latest version with: docker pull squidfunk/mkdocs-material","title":"Get the Docker Image"},{"location":"contributing/MkDocsDocker/#verifying-mkdocsdocker-image","text":"To verify that the MkDocs/Docker images in the previous step works, you can check the version of MkDocs using the following command: MacOS/Linux docker run --rm -it -v ${PWD}:/docs squidfunk/mkdocs-material --version Results of the call will depend on the version contained in the current Docker container. mkdocs, version 1.1.2 from /usr/local/lib/mkdocs (Python 3.8) Windows docker run --rm -it -v \"%cd%\":/docs squidfunk/mkdocs-material --version Results of the call will depend on the version contained in the current Docker container. mkdocs, version 1.1.2 from c:\\local\\python\\mkdocs (Python 3.8)","title":"Verifying MkDocs/Docker Image"},{"location":"contributing/MkDocsDocker/#creating-a-new-site","text":"You can bootstrap your project documentation using the mkdocs executable. Go to the directory where you want your project to be located and enter: MacOS/Linux docker run --rm -it -v ${PWD}:/docs squidfunk/mkdocs-material new . Windows docker run --rm -it -v \"%cd%\":/docs squidfunk/mkdocs-material new . This will create the following structure: . \u251c\u2500 docs/ \u2502 \u2514\u2500 index.md \u2514\u2500 mkdocs.yml","title":"Creating a New Site"},{"location":"contributing/MkDocsDocker/#previewing-documentation-as-its-written","text":"MkDocs includes a live preview server, so you can preview your changes as you write your documentation. The server will automatically rebuild the site upon saving and reload within the browser. Start it with: MacOS/Linux docker run --rm -it -p 8000:8000 -v ${PWD}:/docs squidfunk/mkdocs-material Windows docker run --rm -it -p 8000:8000 -v \"%cd%\":/docs squidfunk/mkdocs-material Point your browser to http://localhost:8000 to see the compiled documentation. Use CTRL/Control-C to stop the server when done.","title":"Previewing Documentation as it's Written"},{"location":"contributing/MkDocsDocker/#building-documentation","text":"When you're finished editing, you can build a static site from your Markdown files with: MacOS/Linux docker run --rm -it -v ${PWD}:/docs squidfunk/mkdocs-material build Windows docker run --rm -it -v \"%cd%\":/docs squidfunk/mkdocs-material build The contents of this directory (./site) make up your project documentation. The site can be hosted on GitHub Pages, GitLab Pages, a CDN of your choice or your private web server.","title":"Building Documentation"},{"location":"contributing/MkDocsDocker/#deploy-documentation-github-pages","text":"Manually deploy project documentation invoke the following command from the directory containing the mkdocs.yml file: MacOS/Linux docker run --rm -it -v ~/.ssh:/root/.ssh -v ${PWD}:/docs squidfunk/mkdocs-material gh-deploy --force Windows docker run --rm -it -v ~/.ssh:/root/.ssh -v \"%cd%\":/docs squidfunk/mkdocs-material gh-deploy --force","title":"Deploy Documentation (GitHub Pages)"},{"location":"contributing/MkDocsDocker/#using-shortcut-script","text":"The commands above are verbose and cumbersome to type. To alleviate this pain, scripts can be used to supply shortcuts. Below are scripts for both MacOS and Windows. The scripts can be named whatever is memorable but will need to be adjusted to reflect that name for the help option. The OS specific script needs to be placed in the sessions PATH. These scripts can be expanded or modified to allow more MkDoc features, but the basics are already supplied. MacOS/Linux #!/bin/sh COMMAND=\"$1\" OPTIONS=\"$2 $3 $4 $5 $6\" case $COMMAND in version) docker run --rm -it -v ${PWD}:/docs squidfunk/mkdocs-material --version ;; serve) docker run --rm -it -p 8000:8000 -v ${PWD}:/docs squidfunk/mkdocs-material ;; build) docker run --rm -it -v ${PWD}:/docs squidfunk/mkdocs-material build $OPTIONS ;; deploy) docker run --rm -it -v ~/.ssh:/root/.ssh -v ${PWD}:/docs squidfunk/mkdocs-material gh-deploy --force ;; new) docker run --rm -it -v ${PWD}:/docs squidfunk/mkdocs-material new . ;; * ) echo \"\\033[1mNAME\\033[0m\" echo \" \\033[1mmd\\033[0m - Command shortcut for MkDocs running under Docker\" echo \"\" echo \"\\033[1mSYNOPSIS\\033[0m\" echo \" \\033[1mmd\\033[0m \\033[4mcommand\\033[0m\" echo \"\" echo \"\\033[1mCOMMANDS\\033[0m\" echo \" Supply one of the following commands to:\" echo \" \\033[1mhelp\\033[0m - Display this helpful information\" echo \" \\033[1mversion\\033[0m - Display MkDocs version information\" echo \" \\033[1mserve\\033[0m - Run the built-in development server (http://localhost:8000) for the current directory (control-c will stop the server)\" echo \" \\033[1mbuild\\033[0m - Build the MkDocs documentation in the current directory\" echo \" \\033[1mdeploy\\033[0m - Deploy documentation to GitHub Pages from the current directory\" echo \" \\033[1mnew\\033[0m - Create a new MkDocs project in the current directory\" echo \"\" exit 1 ;; esac Windows @echo off setlocal set OPTION=%1 IF \"%OPTION%\"==\"version\" ( docker run --rm -it -v %cd%:/docs squidfunk/mkdocs-material --version ) ELSE IF \"%OPTION%\"==\"serve\" ( docker run --rm -it -p 8000:8000 -v %cd%:/docs squidfunk/mkdocs-material ) ELSE IF \"%OPTION%\"==\"build\" ( docker run --rm -it -v %cd%:/docs squidfunk/mkdocs-material build ) ELSE IF \"%OPTION%\"==\"deploy\" ( docker run --rm -it -v ~/.ssh:/root/.ssh -v %cd%:/docs squidfunk/mkdocs-material gh-deploy --force ) ELSE IF \"%OPTION%\"==\"new\" ( docker run --rm -it -v %cd%:/docs squidfunk/mkdocs-material new . ) ELSE ( echo NAME echo mk - Command shortcut for MkDocs running under Docker echo. echo SYNOPSIS echo mk option echo. echo OPTIONS echo Supply one of the following options to: echo help - Display this helpful information echo version - Display MkDocs version information echo serve - Run the built-in development server (http://localhost:8000) for the current directory (ctrl-c will stop the server) echo build - Build the MkDocs documentation in the current directory echo deploy - Deploy documentation to GitHub Pages from the current directory echo new - Create a new MkDocs project in the current directory echo. ) goto :eof The following is the syntax to use the scripts defined above. The MacOS version fo the script is named md , however the Windows version is named mk .bat because it confliced with the Windows MD (MKDIR) command. MacOS/Linux NAME md - Command shortcut for MkDocs running under Docker SYNOPSIS md option (e.g. md serve) OPTIONS Supply one of the following options to: help - Display this helpful information version - Display MkDocs version information serve - Run the built-in development server (http://localhost:8000) for the current directory (control-c will stop the server) build - Build the MkDocs documentation in the current directory deploy - Deploy documentation to GitHub Pages from the current directory new - Create a new MkDocs project in the current directory Windows NAME mk - Command shortcut for MkDocs running under Docker SYNOPSIS mk option (e.g. mk serve) OPTIONS Supply one of the following options to: help - Display this helpful information version - Display MkDocs version information serve - Run the built-in development server (http://localhost:8000) for the current directory (control-c will stop the server) build - Build the MkDocs documentation in the current directory deploy - Deploy documentation to GitHub Pages from the current directory new - Create a new MkDocs project in the current directory","title":"Using Shortcut Script"},{"location":"libraries/kafka/configuration/","text":"Kafka Configuration properties \u00b6 GLOBAL configuration properties \u00b6 allow \u00b6 Property Values Description allow.auto. create.topics false ( true, false ) Allow automatic topic creation on the broker when subscribing to or assigning non-existent topics. The broker must also be configured with auto.create.topics.enable=true for this configuraiton to take effect. Note: The default value (false) is different from the Java consumer (true). Requires broker version >= 0.11.0.0, for older broker versions only the broker configuration applies. Type: boolean Importance: low C/P: Consumer Only api \u00b6 Property Values Description api.version. fallback.ms 0 ( 0 .. 604800000 ) Dictates how long the broker.version.fallback fallback is used in the case the ApiVersionRequest fails. NOTE : The ApiVersionRequest is only issued when a new connection to the broker is made (such as after an upgrade). Type: integer Importance: medium C/P: Both api.version. request.timeout. ms 10000 ( 1 .. 300000 ) Timeout for broker API version requests. Type: integer Importance: low C/P: Both api.version. request true ( true, false ) Request broker's supported API versions to adjust functionality to available protocol features. If set to false, or the ApiVersionRequest fails, the fallback version broker.version.fallback will be used. NOTE : Depends on broker version >=0.10.0. If the request is not supported by (an older) broker the broker.version.fallback fallback is used. Type: boolean Importance: high C/P: Both auto \u00b6 Property Values Description auto.commit. interval.ms 5000 ( 0 .. 86400000 ) The frequency in milliseconds that the consumer offsets are committed (written) to offset storage. (0 = disable). This setting is used by the high-level consumer. Type: integer Importance: medium C/P: Consumer Only background_event_cb \u00b6 Property Values Description background_event_cb Background queue event callback (set with rd_kafka_conf_set_background_event_cb()) Type: see dedicated API Importance: low C/P: Both batch \u00b6 Property Values Description batch.size 1000000 ( 1 .. 2147483647 ) Maximum size (in bytes) of all messages batched in one MessageSet, including protocol framing overhead. This limit is applied after the first message has been added to the batch, regardless of the first message's size, this is to ensure that messages that exceed batch.size are produced. The total MessageSet size is also limited by batch.num.messages and message.max.bytes. Type: integer Importance: medium C/P: Producer Only batch.num. messages 10000 ( 1 .. 1000000 ) Maximum number of messages batched in one MessageSet. The total MessageSet size is also limited by batch.size and message.max.bytes. Type: integer Importance: medium C/P: Producer Only bootstrap \u00b6 Property Values Description bootstrap.servers Alias for metadata.broker.list : Initial list of brokers as a CSV list of broker host or host:port. The application may also use rd_kafka_brokers_add() to add brokers during runtime. Type: string Importance: high C/P: Both broker \u00b6 Property Values Description broker.version. fallback 0.10.0 Older broker versions (before 0.10.0) provide no way for a client to query for supported protocol features (ApiVersionRequest, see api.version.request ) making it impossible for the client to know what features it may use. As a workaround a user may set this property to the expected broker version and the client will automatically adjust its feature set accordingly if the ApiVersionRequest fails (or is disabled). The fallback broker version will be used for api.version.fallback.ms . Valid values are: 0.9.0, 0.8.2, 0.8.1, 0.8.0. Any other value >= 0.10, such as 0.10.2.1, enables ApiVersionRequests. Type: string Importance: medium C/P: Both broker.address. family any ( any, v4, v6 ) Allowed broker IP address families: any, v4, v6 Type: enum value Importance: low C/P: Both broker.address. ttl 1000 ( 0 .. 86400000 ) How long to cache the broker address resolving results (milliseconds). Type: integer Importance: low C/P: Both builtin \u00b6 Property Values Description builtin.features gzip, snappy, ssl, sasl, regex, lz4, sasl_gssapi, sasl_plain, sasl_scram, plugins, zstd, sasl_oauthbearer Indicates the builtin features for this build of librdkafka. An application can either query this value or attempt to set it with its list of required features to check for library support. Type: CSV flags Importance: low C/P: Both check \u00b6 Property Values Description check.crcs false ( true, false ) Verify CRC32 of consumed messages, ensuring no on-the-wire or on-disk corruption to the messages occurred. This check comes at slightly increased CPU usage. Type: boolean Importance: medium C/P: Consumer Only client \u00b6 Property Values Description client.rack A rack identifier for this client. This can be any string value which indicates where this client is physically located. It corresponds with the broker config broker.rack . Type: string Importance: low C/P: Both client.id rdkafka Client identifier. Type: string Importance: low C/P: Both closesocket_cb \u00b6 Property Values Description closesocket_cb Socket close callback Type: see dedicated API Importance: low C/P: Both compression \u00b6 Property Values Description compression.codec none ( none, gzip, snappy, lz4, zstd ) compression codec to use for compressing message sets. This is the default value for all topics, may be overridden by the topic configuration property compression.codec . Type: enum value Importance: medium C/P: Producer Only compression.type none ( none, gzip, snappy, lz4, zstd ) Alias for compression.codec : compression codec to use for compressing message sets. This is the default value for all topics, may be overridden by the topic configuration property compression.codec . Type: enum value Importance: medium C/P: Producer Only connections \u00b6 Property Values Description connections.max. idle.ms 0 ( 0 .. 2147483647 ) Close broker connections after the specified time of inactivity. Disable with 0. If this property is left at its default value some heuristics are performed to determine a suitable default value, this is currently limited to identifying brokers on Azure (see librdkafka issue #3109 for more info). Type: integer Importance: medium C/P: Both connect_cb \u00b6 Property Values Description connect_cb Socket connect callback Type: see dedicated API Importance: low C/P: Both consume_cb \u00b6 Property Values Description consume_cb Message consume callback (set with rd_kafka_conf_set_consume_cb()) Type: see dedicated API Importance: low C/P: Consumer Only coordinator \u00b6 Property Values Description coordinator.query. interval.ms 600000 ( 1 .. 3600000 ) How often to query for the current client group coordinator. If the currently assigned coordinator is down the configured query interval will be divided by ten to more quickly recover in case of coordinator reassignment. Type: integer Importance: low C/P: Consumer Only debug \u00b6 Property Values Description debug ( generic, broker, topic, metadata, feature, queue, msg, protocol, cgrp, security, fetch, interceptor, plugin, consumer, admin, eos, mock, assignor, conf, all ) A comma-separated list of debug contexts to enable. Detailed Producer debugging: broker,topic,msg. Consumer: consumer,cgrp,topic,fetch Type: CSV flags Importance: medium C/P: Both default_topic_conf \u00b6 Property Values Description default_topic_conf Default topic configuration for automatically subscribed topics Type: see dedicated API Importance: low C/P: Both delivery \u00b6 Property Values Description delivery.report. only.error false ( true, false ) Only provide delivery reports for failed messages. Type: boolean Importance: low C/P: Producer Only dr_cb \u00b6 Property Values Description dr_cb Delivery report callback (set with rd_kafka_conf_set_dr_cb()) Type: see dedicated API Importance: low C/P: Producer Only dr_msg_cb \u00b6 Property Values Description dr_msg_cb Delivery report callback (set with rd_kafka_conf_set_dr_msg_cb()) Type: see dedicated API Importance: low C/P: Producer Only enable \u00b6 Property Values Description enable.idempotence false ( true, false ) When set to true , the producer will ensure that messages are successfully produced exactly once and in the original produce order. The following configuration properties are adjusted automatically (if not modified by the user) when idempotence is enabled: max.in.flight.requests.per.connection=5 (must be less than or equal to 5), retries=INT32_MAX (must be greater than 0), acks=all , queuing.strategy=fifo . Producer instantation will fail if user-supplied configuration is incompatible. Type: boolean Importance: high C/P: Producer Only enable.gapless. guarantee false ( true, false ) EXPERIMENTAL : subject to change or removal. When set to true , any error that could result in a gap in the produced message series when a batch of messages fails, will raise a fatal error (ERR__GAPLESS_GUARANTEE) and stop the producer. Messages failing due to message.timeout.ms are not covered by this guarantee. Requires enable.idempotence=true . Type: boolean Importance: low C/P: Producer Only enable.random. seed true ( true, false ) If enabled librdkafka will initialize the PRNG with srand(current_time.milliseconds) on the first invocation of rd_kafka_new() (required only if rand_r() is not available on your platform). If disabled the application must call srand() prior to calling rd_kafka_new(). Type: boolean Importance: low C/P: Both enable.auto. commit true ( true, false ) Automatically and periodically commit offsets in the background. Note: setting this to false does not prevent the consumer from fetching previously committed start offsets. To circumvent this behaviour set specific start offsets per partition in the call to assign(). Type: boolean Importance: high C/P: Consumer Only enable.ssl. certificate.verification true ( true, false ) Enable OpenSSL's builtin broker (server) certificate verification. This verification can be extended by the application by implementing a certificate_verify_cb. Type: boolean Importance: low C/P: Both enable.sasl. oauthbearer.unsecure. jwt false ( true, false ) Enable the builtin unsecure JWT OAUTHBEARER token handler if no oauthbearer_refresh_cb has been set. This builtin handler should only be used for development or testing, and not in production. Type: boolean Importance: low C/P: Both enable.partition. eof false ( true, false ) Emit RD_KAFKA_RESP_ERR__PARTITION_EOF event whenever the consumer reaches the end of a partition. Type: boolean Importance: low C/P: Consumer Only enable.auto. offset.store true ( true, false ) Automatically store offset of last message provided to application. The offset store is an in-memory store of the next offset to (auto-)commit for each partition. Type: boolean Importance: high C/P: Consumer Only enabled_events \u00b6 Property Values Description enabled_events 0 ( 0 .. 2147483647 ) See rd_kafka_conf_set_events() Type: integer Importance: low C/P: Both error_cb \u00b6 Property Values Description error_cb Error callback (set with rd_kafka_conf_set_error_cb()) Type: see dedicated API Importance: low C/P: Both fetch \u00b6 Property Values Description fetch.min. bytes 1 ( 1 .. 100000000 ) Minimum number of bytes the broker responds with. If fetch.wait.max.ms expires the accumulated data will be sent to the client regardless of this setting. Type: integer Importance: low C/P: Consumer Only fetch.max. bytes 52428800 ( 0 .. 2147483135 ) Maximum amount of data the broker shall return for a Fetch request. Messages are fetched in batches by the consumer and if the first message batch in the first non-empty partition of the Fetch request is larger than this value, then the message batch will still be returned to ensure the consumer can make progress. The maximum message batch size accepted by the broker is defined via message.max.bytes (broker config) or max.message.bytes (broker topic config). fetch.max.bytes is automatically adjusted upwards to be at least message.max.bytes (consumer config). Type: integer Importance: medium C/P: Consumer Only fetch.wait. max.ms 500 ( 0 .. 300000 ) Maximum time the broker may wait to fill the Fetch response with fetch.min.bytes of messages. Type: integer Importance: low C/P: Consumer Only fetch.error. backoff.ms 500 ( 0 .. 300000 ) How long to postpone the next fetch request for a topic+partition in case of a fetch error. Type: integer Importance: medium C/P: Consumer Only fetch.message. max.bytes 1048576 ( 1 .. 1000000000 ) Initial maximum number of bytes per topic+partition to request when fetching messages from the broker. If the client encounters a message larger than this value it will gradually try to increase it until the entire message can be fetched. Type: integer Importance: medium C/P: Consumer Only group \u00b6 Property Values Description group.id Client group id string. All clients sharing the same group.id belong to the same group. Type: string Importance: high C/P: Consumer Only group.protocol. type consumer Group protocol type. NOTE: Currently, the only supported group protocol type is consumer . Type: string Importance: low C/P: Consumer Only group.instance. id Enable static group membership. Static group members are able to leave and rejoin a group within the configured session.timeout.ms without prompting a group rebalance. This should be used in combination with a larger session.timeout.ms to avoid group rebalances caused by transient unavailability (e.g. process restarts). Requires broker version >= 2.3.0. Type: string Importance: medium C/P: Consumer Only heartbeat \u00b6 Property Values Description heartbeat.interval. ms 3000 ( 1 .. 3600000 ) Group session keepalive heartbeat interval. Type: integer Importance: low C/P: Consumer Only interceptors \u00b6 Property Values Description interceptors Interceptors added through rd_kafka_conf_interceptor_add_..() and any configuration handled by interceptors. Type: see dedicated API Importance: low C/P: Both internal \u00b6 Property Values Description internal.termination. signal 0 ( 0 .. 128 ) Signal that librdkafka will use to quickly terminate on rd_kafka_destroy(). If this signal is not set then there will be a delay before rd_kafka_wait_destroyed() returns true as internal threads are timing out their system calls. If this signal is set however the delay will be minimal. The application should mask this signal as an internal signal handler is installed. Type: integer Importance: low C/P: Both isolation \u00b6 Property Values Description isolation.level read_committed ( read_uncommitted, read_committed ) Controls how to read messages written transactionally: read_committed - only return transactional messages which have been committed. read_uncommitted - return all messages, even transactional messages which have been aborted. Type: enum value Importance: high C/P: Consumer Only linger \u00b6 Property Values Description linger.ms 5 ( 0 .. 900000 ) Alias for queue.buffering.max.ms : Delay in milliseconds to wait for messages in the producer queue to accumulate before constructing message batches (MessageSets) to transmit to brokers. A higher value allows larger and more effective (less overhead, improved compression) batches of messages to accumulate at the expense of increased message delivery latency. Type: float Importance: high C/P: Producer Only log \u00b6 Property Values Description log.connection. close true ( true, false ) Log broker disconnects. It might be useful to turn this off when interacting with 0.9 brokers with an aggressive connection.max.idle.ms value. Type: boolean Importance: low C/P: Both log.thread. name true ( true, false ) Print internal thread name in log messages (useful for debugging librdkafka internals) Type: boolean Importance: low C/P: Both log.queue false ( true, false ) Disable spontaneous log_cb from internal librdkafka threads, instead enqueue log messages on queue set with rd_kafka_set_log_queue() and serve log callbacks or events through the standard poll APIs. NOTE : Log messages will linger in a temporary queue until the log queue has been set. Type: boolean Importance: low C/P: Both log_cb \u00b6 Property Values Description log_cb Log callback (set with rd_kafka_conf_set_log_cb()) Type: see dedicated API Importance: low C/P: Both log_level \u00b6 Property Values Description log_level 6 ( 0 .. 7 ) Logging level (syslog(3) levels) Type: integer Importance: low C/P: Both max \u00b6 Property Values Description max.partition. fetch.bytes 1048576 ( 1 .. 1000000000 ) Alias for fetch.message.max.bytes : Initial maximum number of bytes per topic+partition to request when fetching messages from the broker. If the client encounters a message larger than this value it will gradually try to increase it until the entire message can be fetched. Type: integer Importance: medium C/P: Consumer Only max.poll. interval.ms 300000 ( 1 .. 86400000 ) Maximum allowed time between calls to consume messages (e.g., rd_kafka_consumer_poll()) for high-level consumers. If this interval is exceeded the consumer is considered failed and the group will rebalance in order to reassign the partitions to another consumer group member. Warning: Offset commits may be not possible at this point. Note: It is recommended to set enable.auto.offset.store=false for long-time processing applications and then explicitly store offsets (using offsets_store()) after message processing, to make sure offsets are not auto-committed prior to processing has finished. The interval is checked two times per second. See KIP-62 for more information. Type: integer Importance: high C/P: Consumer Only max.in. flight 1000000 ( 1 .. 1000000 ) Alias for max.in.flight.requests.per.connection : Maximum number of in-flight requests per broker connection. This is a generic property applied to all broker communication, however it is primarily relevant to produce requests. In particular, note that other mechanisms limit the number of outstanding consumer fetch request per broker to one. Type: integer Importance: low C/P: Both max.in. flight.requests. per.connection 1000000 ( 1 .. 1000000 ) Maximum number of in-flight requests per broker connection. This is a generic property applied to all broker communication, however it is primarily relevant to produce requests. In particular, note that other mechanisms limit the number of outstanding consumer fetch request per broker to one. Type: integer Importance: low C/P: Both message \u00b6 Property Values Description message.max. bytes 1000000 ( 1000 .. 1000000000 ) Maximum Kafka protocol request message size. Due to differing framing overhead between protocol versions the producer is unable to reliably enforce a strict max message limit at produce time and may exceed the maximum size by one message in protocol ProduceRequests, the broker will enforce the the topic's max.message.bytes limit (see Apache Kafka documentation). Type: integer Importance: medium C/P: Both message.copy. max.bytes 65535 ( 0 .. 1000000000 ) Maximum size for message to be copied to buffer. Messages larger than this will be passed by reference (zero-copy) at the expense of larger iovecs. Type: integer Importance: low C/P: Both message.send. max.retries 2147483647 ( 0 .. 2147483647 ) How many times to retry sending a failing Message. Note: retrying may cause reordering unless enable.idempotence is set to true. Type: integer Importance: high C/P: Producer Only metadata \u00b6 Property Values Description metadata.request. timeout.ms 60000 ( 10 .. 900000 ) Non-topic request timeout in milliseconds. This is for metadata requests, etc. Type: integer Importance: low C/P: Both metadata.broker. list Initial list of brokers as a CSV list of broker host or host:port. The application may also use rd_kafka_brokers_add() to add brokers during runtime. Type: string Importance: high C/P: Both metadata.max. age.ms 900000 ( 1 .. 86400000 ) Metadata cache max age. Defaults to topic.metadata.refresh.interval.ms * 3 Type: integer Importance: low C/P: Both oauthbearer_token_refresh_cb \u00b6 Property Values Description oauthbearer_token_refresh_cb SASL/OAUTHBEARER token refresh callback (set with rd_kafka_conf_set_oauthbearer_token_refresh_cb(), triggered by rd_kafka_poll(), et.al. This callback will be triggered when it is time to refresh the client's OAUTHBEARER token. Type: see dedicated API Importance: low C/P: Both offset \u00b6 Property Values Description offset.store. method broker ( none, file, broker ) DEPRECATED Offset commit store method: 'file' - DEPRECATED: local file store (offset.store.path, et.al), 'broker' - broker commit store (requires Apache Kafka 0.8.2 or later on the broker). Type: enum value Importance: low C/P: Consumer Only offset_commit_cb \u00b6 Property Values Description offset_commit_cb Offset commit result propagation callback. (set with rd_kafka_conf_set_offset_commit_cb()) Type: see dedicated API Importance: low C/P: Consumer Only opaque \u00b6 Property Values Description opaque Application opaque (set with rd_kafka_conf_set_opaque()) Type: see dedicated API Importance: low C/P: Both open_cb \u00b6 Property Values Description open_cb File open callback to provide race-free CLOEXEC Type: see dedicated API Importance: low C/P: Both partition \u00b6 Property Values Description partition.assignment. strategy range,roundrobin The name of one or more partition assignment strategies. The elected group leader will use a strategy supported by all members of the group to assign partitions to group members. If there is more than one eligible strategy, preference is determined by the order of this list (strategies earlier in the list have higher priority). Cooperative and non-cooperative (eager) strategies must not be mixed. Available strategies: range, roundrobin, cooperative-sticky. Type: string Importance: medium C/P: Consumer Only plugin \u00b6 Property Values Description plugin.library. paths List of plugin libraries to load (; separated). The library search path is platform dependent (see dlopen(3) for Unix and LoadLibrary() for Windows). If no filename extension is specified the platform-specific extension (such as .dll or .so) will be appended automatically. Type: string Importance: low C/P: Both queue \u00b6 Property Values Description queue.buffering. max.messages 100000 ( 1 .. 10000000 ) Maximum number of messages allowed on the producer queue. This queue is shared by all topics and partitions. Type: integer Importance: high C/P: Producer Only queue.buffering. max.kbytes 1048576 ( 1 .. 2147483647 ) Maximum total message size sum allowed on the producer queue. This queue is shared by all topics and partitions. This property has higher priority than queue.buffering.max.messages. Type: integer Importance: high C/P: Producer Only queue.buffering. max.ms 5 ( 0 .. 900000 ) Delay in milliseconds to wait for messages in the producer queue to accumulate before constructing message batches (MessageSets) to transmit to brokers. A higher value allows larger and more effective (less overhead, improved compression) batches of messages to accumulate at the expense of increased message delivery latency. Type: float Importance: high C/P: Producer Only queue.buffering. backpressure.threshold 1 ( 1 .. 1000000 ) The threshold of outstanding not yet transmitted broker requests needed to backpressure the producer's message accumulator. If the number of not yet transmitted requests equals or exceeds this number, produce request creation that would have otherwise been triggered (for example, in accordance with linger.ms) will be delayed. A lower number yields larger and more effective batches. A higher value can improve latency when using compression on slow machines. Type: integer Importance: low C/P: Producer Only queued \u00b6 Property Values Description queued.min. messages 100000 ( 1 .. 10000000 ) Minimum number of messages per topic+partition librdkafka tries to maintain in the local consumer queue. Type: integer Importance: medium C/P: Consumer Only queued.max. messages.kbytes 65536 ( 1 .. 2097151 ) Maximum number of kilobytes of queued pre-fetched messages in the local consumer queue. If using the high-level consumer this setting applies to the single consumer queue, regardless of the number of partitions. When using the legacy simple consumer or when separate partition queues are used this setting applies per partition. This value may be overshot by fetch.message.max.bytes. This property has higher priority than queued.min.messages. Type: integer Importance: medium C/P: Consumer Only rebalance_cb \u00b6 Property Values Description rebalance_cb Called after consumer group has been rebalanced (set with rd_kafka_conf_set_rebalance_cb()) Type: see dedicated API Importance: low C/P: Consumer Only receive \u00b6 Property Values Description receive.message. max.bytes 100000000 ( 1000 .. 2147483647 ) Maximum Kafka protocol response message size. This serves as a safety precaution to avoid memory exhaustion in case of protocol hickups. This value must be at least fetch.max.bytes + 512 to allow for protocol overhead; the value is adjusted automatically unless the configuration property is explicitly set. Type: integer Importance: medium C/P: Both reconnect \u00b6 Property Values Description reconnect.backoff. ms 100 ( 0 .. 3600000 ) The initial time to wait before reconnecting to a broker after the connection has been closed. The time is increased exponentially until reconnect.backoff.max.ms is reached. -25% to +50% jitter is applied to each reconnect backoff. A value of 0 disables the backoff and reconnects immediately. Type: integer Importance: medium C/P: Both reconnect.backoff. jitter.ms 0 ( 0 .. 3600000 ) DEPRECATED No longer used. See reconnect.backoff.ms and reconnect.backoff.max.ms . Type: integer Importance: low C/P: Both reconnect.backoff. max.ms 10000 ( 0 .. 3600000 ) The maximum time to wait before reconnecting to a broker after the connection has been closed. Type: integer Importance: medium C/P: Both retries \u00b6 Property Values Description retries 2147483647 ( 0 .. 2147483647 ) Alias for message.send.max.retries : How many times to retry sending a failing Message. Note: retrying may cause reordering unless enable.idempotence is set to true. Type: integer Importance: high C/P: Producer Only retry \u00b6 Property Values Description retry.backoff. ms 100 ( 1 .. 300000 ) The backoff time in milliseconds before retrying a protocol request. Type: integer Importance: medium C/P: Producer Only sasl \u00b6 Property Values Description sasl.password SASL password for use with the PLAIN and SASL-SCRAM-.. mechanism Type: string Importance: high C/P: Both sasl.username SASL username for use with the PLAIN and SASL-SCRAM-.. mechanisms Type: string Importance: high C/P: Both sasl.kerberos. min.time. before.relogin 60000 ( 0 .. 86400000 ) Minimum time in milliseconds between key refresh attempts. Disable automatic key refresh by setting this property to 0. Type: integer Importance: low C/P: Both sasl.kerberos. keytab Path to Kerberos keytab file. This configuration property is only used as a variable in sasl.kerberos.kinit.cmd as ... -t \"%{sasl.kerberos.keytab}\" . Type: string Importance: low C/P: Both sasl.kerberos. kinit.cmd kinit -R -t \"%{sasl.kerberos.keytab}\" -k %{sasl.kerberos.principal} \\ kinit -t \"%{sasl.kerberos.keytab}\" -k %{sasl.kerberos.principal} Importance: * C/P: *Both sasl.kerberos. principal kafkaclient This client's Kerberos principal name. (Not supported on Windows, will use the logon user's principal). Type: string Importance: low C/P: Both sasl.kerberos. service.name kafka Kerberos principal name that Kafka runs as, not including /hostname@REALM Type: string Importance: low C/P: Both sasl.mechanisms GSSAPI SASL mechanism to use for authentication. Supported: GSSAPI, PLAIN, SCRAM-SHA-256, SCRAM-SHA-512, OAUTHBEARER. NOTE : Despite the name only one mechanism must be configured. Type: string Importance: high C/P: Both sasl.oauthbearer. config SASL/OAUTHBEARER configuration. The format is implementation-dependent and must be parsed accordingly. The default unsecured token implementation (see https://tools.ietf.org/html/rfc7515#appendix-A.5 ) recognizes space-separated name=value pairs with valid names including principalClaimName, principal, scopeClaimName, scope, and lifeSeconds. The default value for principalClaimName is \"sub\", the default value for scopeClaimName is \"scope\", and the default value for lifeSeconds is 3600. The scope value is CSV format with the default value being no/empty scope. For example: principalClaimName=azp principal=admin scopeClaimName=roles scope=role1,role2 lifeSeconds=600 . In addition, SASL extensions can be communicated to the broker via extension_NAME=value . For example: principal=admin extension_traceId=123 Type: string Importance: low C/P: Both sasl.mechanism GSSAPI Alias for sasl.mechanisms : SASL mechanism to use for authentication. Supported: GSSAPI, PLAIN, SCRAM-SHA-256, SCRAM-SHA-512, OAUTHBEARER. NOTE : Despite the name only one mechanism must be configured. Type: string Importance: high C/P: Both security \u00b6 Property Values Description security.protocol plaintext ( plaintext, ssl, sasl_plaintext, sasl_ssl ) Protocol used to communicate with brokers. Type: enum value Importance: high C/P: Both session \u00b6 Property Values Description session.timeout. ms 10000 ( 1 .. 3600000 ) Client group session and failure detection timeout. The consumer sends periodic heartbeats (heartbeat.interval.ms) to indicate its liveness to the broker. If no hearts are received by the broker for a group member within the session timeout, the broker will remove the consumer from the group and trigger a rebalance. The allowed range is configured with the broker configuration properties group.min.session.timeout.ms and group.max.session.timeout.ms . Also see max.poll.interval.ms . Type: integer Importance: high C/P: Consumer Only socket \u00b6 Property Values Description socket.receive. buffer.bytes 0 ( 0 .. 100000000 ) Broker socket receive buffer size. System default is used if 0. Type: integer Importance: low C/P: Both socket.keepalive. enable false ( true, false ) Enable TCP keep-alives (SO_KEEPALIVE) on broker sockets Type: boolean Importance: low C/P: Both socket.timeout. ms 60000 ( 10 .. 300000 ) Default timeout for network requests. Producer: ProduceRequests will use the lesser value of socket.timeout.ms and remaining message.timeout.ms for the first message in the batch. Consumer: FetchRequests will use fetch.wait.max.ms + socket.timeout.ms . Admin: Admin requests will use socket.timeout.ms or explicitly set rd_kafka_AdminOptions_set_operation_timeout() value. Type: integer Importance: low C/P: Both socket.nagle. disable false ( true, false ) Disable the Nagle algorithm (TCP_NODELAY) on broker sockets. Type: boolean Importance: low C/P: Both socket.blocking. max.ms 1000 ( 1 .. 60000 ) DEPRECATED No longer used. Type: integer Importance: low C/P: Both socket.send. buffer.bytes 0 ( 0 .. 100000000 ) Broker socket send buffer size. System default is used if 0. Type: integer Importance: low C/P: Both socket.max. fails 1 ( 0 .. 1000000 ) Disconnect from broker when this number of send failures (e.g., timed out requests) is reached. Disable with 0. WARNING: It is highly recommended to leave this setting at its default value of 1 to avoid the client and broker to become desynchronized in case of request timeouts. NOTE: The connection is automatically re-established. Type: integer Importance: low C/P: Both socket_cb \u00b6 Property Values Description socket_cb Socket creation callback to provide race-free CLOEXEC Type: see dedicated API Importance: low C/P: Both ssl \u00b6 Property Values Description ssl.engine. location Path to OpenSSL engine library. OpenSSL >= 1.1.0 required. Type: string Importance: low C/P: Both ssl.cipher. suites A cipher suite is a named combination of authentication, encryption, MAC and key exchange algorithm used to negotiate the security settings for a network connection using TLS or SSL network protocol. See manual page for ciphers(1) and `SSL_CTX_set_cipher_list(3). Type: string Importance: low C/P: Both ssl.key. password Private key passphrase (for use with ssl.key.location and set_ssl_cert() ) Type: string Importance: low C/P: Both ssl.key. pem Client's private key string (PEM format) used for authentication. Type: string Importance: low C/P: Both ssl.certificate. pem Client's public key string (PEM format) used for authentication. Type: string Importance: low C/P: Both ssl.curves. list The supported-curves extension in the TLS ClientHello message specifies the curves (standard/named, or 'explicit' GF(2^k) or GF(p)) the client is willing to have the server use. See manual page for SSL_CTX_set1_curves_list(3) . OpenSSL >= 1.0.2 required. Type: string Importance: low C/P: Both ssl.certificate. verify_cb Callback to verify the broker certificate chain. Type: see dedicated API Importance: low C/P: Both ssl.endpoint. identification.algorithm none ( none, https ) Endpoint identification algorithm to validate broker hostname using broker certificate. https - Server (broker) hostname verification as specified in RFC2818. none - No endpoint verification. OpenSSL >= 1.0.2 required. Type: enum value Importance: low C/P: Both ssl.sigalgs. list The client uses the TLS ClientHello signature_algorithms extension to indicate to the server which signature/hash algorithm pairs may be used in digital signatures. See manual page for SSL_CTX_set1_sigalgs_list(3) . OpenSSL >= 1.0.2 required. Type: string Importance: low C/P: Both ssl.certificate. location Path to client's public key (PEM) used for authentication. Type: string Importance: low C/P: Both ssl.engine. id dynamic OpenSSL engine id is the name used for loading engine. Type: string Importance: low C/P: Both ssl.key. location Path to client's private key (PEM) used for authentication. Type: string Importance: low C/P: Both ssl.keystore. password Client's keystore ( PKCS#12 ) password. Type: string Importance: low C/P: Both ssl.keystore. location Path to client's keystore ( PKCS#12 ) used for authentication. Type: string Importance: low C/P: Both ssl.crl. location Path to CRL for verifying broker's certificate validity. Type: string Importance: low C/P: Both ssl.ca. certificate.stores Root Comma-separated list of Windows Certificate stores to load CA certificates from. Certificates will be loaded in the same order as stores are specified. If no certificates can be loaded from any of the specified stores an error is logged and the OpenSSL library's default CA location is used instead. Store names are typically one or more of: MY, Root, Trust, CA. Type: string Importance: low C/P: Both ssl.ca. location File or directory path to CA certificate(s) for verifying the broker's key. Defaults: On Windows the system's CA certificates are automatically looked up in the Windows Root certificate store. On Mac OSX this configuration defaults to probe . It is recommended to install openssl using Homebrew, to provide CA certificates. On Linux install the distribution's ca-certificates package. If OpenSSL is statically linked or ssl.ca.location is set to probe a list of standard paths will be probed and the first one found will be used as the default CA certificate location path. If OpenSSL is dynamically linked the OpenSSL library's default path will be used (see OPENSSLDIR in openssl version -a ). Type: string Importance: low C/P: Both ssl_ca \u00b6 Property Values Description ssl_ca CA certificate as set by rd_kafka_conf_set_ssl_cert() Type: see dedicated API Importance: low C/P: Both ssl_certificate \u00b6 Property Values Description ssl_certificate Client's public key as set by rd_kafka_conf_set_ssl_cert() Type: see dedicated API Importance: low C/P: Both ssl_engine_callback_data \u00b6 Property Values Description ssl_engine_callback_data OpenSSL engine callback data (set with rd_kafka_conf_set_engine_callback_data()). Type: pointer Importance: low C/P: Both ssl_key \u00b6 Property Values Description ssl_key Client's private key as set by rd_kafka_conf_set_ssl_cert() Type: see dedicated API Importance: low C/P: Both statistics \u00b6 Property Values Description statistics.interval. ms 0 ( 0 .. 86400000 ) librdkafka statistics emit interval. The application also needs to register a stats callback using rd_kafka_conf_set_stats_cb() . The granularity is 1000ms. A value of 0 disables statistics. Type: integer Importance: high C/P: Both stats_cb \u00b6 Property Values Description stats_cb Statistics callback (set with rd_kafka_conf_set_stats_cb()) Type: see dedicated API Importance: low C/P: Both sticky \u00b6 Property Values Description sticky.partitioning. linger.ms 10 ( 0 .. 900000 ) Delay in milliseconds to wait to assign new sticky partitions for each topic. By default, set to double the time of linger.ms. To disable sticky behavior, set to 0. This behavior affects messages with the key NULL in all cases, and messages with key lengths of zero when the consistent_random partitioner is in use. These messages would otherwise be assigned randomly. A higher value allows for more effective batching of these messages. Type: integer Importance: low C/P: Producer Only throttle_cb \u00b6 Property Values Description throttle_cb Throttle callback (set with rd_kafka_conf_set_throttle_cb()) Type: see dedicated API Importance: low C/P: Both topic \u00b6 Property Values Description topic.metadata. refresh.interval. ms 300000 ( -1 .. 3600000 ) Period of time in milliseconds at which topic and broker metadata is refreshed in order to proactively discover any new brokers, topics, partitions or partition leader changes. Use -1 to disable the intervalled refresh (not recommended). If there are no locally referenced topics (no topic objects created, no messages produced, no subscription or no assignment) then only the broker list will be refreshed every interval but no more often than every 10s. Type: integer Importance: low C/P: Both topic.blacklist Topic blacklist, a comma-separated list of regular expressions for matching topic names that should be ignored in broker metadata information as if the topics did not exist. Type: pattern list Importance: low C/P: Both topic.metadata. propagation.max. ms 30000 ( 0 .. 3600000 ) Apache Kafka topic creation is asynchronous and it takes some time for a new topic to propagate throughout the cluster to all brokers. If a client requests topic metadata after manual topic creation but before the topic has been fully propagated to the broker the client is requesting metadata from, the topic will seem to be non-existent and the client will mark the topic as such, failing queued produced messages with ERR__UNKNOWN_TOPIC . This setting delays marking a topic as non-existent until the configured propagation max time has passed. The maximum propagation time is calculated from the time the topic is first referenced in the client, e.g., on produce(). Type: integer Importance: low C/P: Both topic.metadata. refresh.sparse true ( true, false ) Sparse metadata requests (consumes less network bandwidth) Type: boolean Importance: low C/P: Both topic.metadata. refresh.fast. cnt 10 ( 0 .. 1000 ) DEPRECATED No longer used. Type: integer Importance: low C/P: Both topic.metadata. refresh.fast. interval.ms 250 ( 1 .. 60000 ) When a topic loses its leader a new metadata request will be enqueued with this initial interval, exponentially increasing until the topic metadata has been refreshed. This is used to recover quickly from transitioning leader brokers. Type: integer Importance: low C/P: Both transaction \u00b6 Property Values Description transaction.timeout. ms 60000 ( 1000 .. 2147483647 ) The maximum amount of time in milliseconds that the transaction coordinator will wait for a transaction status update from the producer before proactively aborting the ongoing transaction. If this value is larger than the transaction.max.timeout.ms setting in the broker, the init_transactions() call will fail with ERR_INVALID_TRANSACTION_TIMEOUT. The transaction timeout automatically adjusts message.timeout.ms and socket.timeout.ms , unless explicitly configured in which case they must not exceed the transaction timeout ( socket.timeout.ms must be at least 100ms lower than transaction.timeout.ms ). This is also the default timeout value if no timeout (-1) is supplied to the transactional API methods. Type: integer Importance: medium C/P: Producer Only transactional \u00b6 Property Values Description transactional.id Enables the transactional producer. The transactional.id is used to identify the same transactional producer instance across process restarts. It allows the producer to guarantee that transactions corresponding to earlier instances of the same producer have been finalized prior to starting any new transactions, and that any zombie instances are fenced off. If no transactional.id is provided, then the producer is limited to idempotent delivery (if enable.idempotence is set). Requires broker version >= 0.11.0. Type: string Importance: high C/P: Producer Only TOPIC configuration properties \u00b6 acks \u00b6 Property Values Description acks -1 ( -1 .. 1000 ) Alias for request.required.acks : This field indicates the number of acknowledgements the leader broker must receive from ISR brokers before responding to the request: 0 =Broker does not send any response/ack to client, -1 or all =Broker will block until message is committed by all in sync replicas (ISRs). If there are less than min.insync.replicas (broker configuration) in the ISR set the produce request will fail. Type: integer Importance: high C/P: Producer Only auto \u00b6 Property Values Description auto.offset. reset largest ( smallest, earliest, beginning, largest, latest, end, error ) Action to take when there is no initial offset in offset store or the desired offset is out of range: 'smallest','earliest' - automatically reset the offset to the smallest offset, 'largest','latest' - automatically reset the offset to the largest offset, 'error' - trigger an error (ERR__AUTO_OFFSET_RESET) which is retrieved by consuming messages and checking 'message->err'. Type: enum value Importance: high C/P: Consumer Only auto.commit. interval.ms 60000 ( 10 .. 86400000 ) [ LEGACY PROPERTY: This setting is used by the simple legacy consumer only. When using the high-level KafkaConsumer, the global auto.commit.interval.ms property must be used instead]. The frequency in milliseconds that the consumer offsets are committed (written) to offset storage. Type: integer Importance: high C/P: Consumer Only auto.commit. enable true ( true, false ) DEPRECATED [ LEGACY PROPERTY: This property is used by the simple legacy consumer only. When using the high-level KafkaConsumer, the global enable.auto.commit property must be used instead]. If true, periodically commit offset of the last message handed to the application. This committed offset will be used when the process restarts to pick up where it left off. If false, the application will have to call rd_kafka_offset_store() to store an offset (optional). NOTE: There is currently no zookeeper integration, offsets will be written to broker or local file according to offset.store.method. Type: boolean Importance: low C/P: Consumer Only compression \u00b6 Property Values Description compression.level -1 ( -1 .. 12 ) Compression level parameter for algorithm selected by configuration property compression.codec . Higher values will result in better compression at the cost of more CPU usage. Usable range is algorithm-dependent: [0-9] for gzip; [0-12] for lz4; only 0 for snappy; -1 = codec-dependent default compression level. Type: integer Importance: medium C/P: Producer Only compression.type none ( none, gzip, snappy, lz4, zstd ) Alias for compression.codec : compression codec to use for compressing message sets. This is the default value for all topics, may be overridden by the topic configuration property compression.codec . Type: enum value Importance: medium C/P: Producer Only compression.codec inherit ( none, gzip, snappy, lz4, zstd, inherit ) Compression codec to use for compressing message sets. inherit = inherit global compression.codec configuration. Type: enum value Importance: high C/P: Producer Only consume \u00b6 Property Values Description consume.callback. max.messages 0 ( 0 .. 1000000 ) Maximum number of messages to dispatch in one rd_kafka_consume_callback*() call (0 = unlimited) Type: integer Importance: low C/P: Consumer Only delivery \u00b6 Property Values Description delivery.timeout. ms 300000 ( 0 .. 2147483647 ) Alias for message.timeout.ms : Local message timeout. This value is only enforced locally and limits the time a produced message waits for successful delivery. A time of 0 is infinite. This is the maximum time librdkafka may use to deliver a message (including retries). Delivery error occurs when either the retry count or the message timeout are exceeded. The message timeout is automatically adjusted to transaction.timeout.ms if transactional.id is configured. Type: integer Importance: high C/P: Producer Only enable \u00b6 Property Values Description enable.auto. commit true ( true, false ) DEPRECATED Alias for auto.commit.enable : [ LEGACY PROPERTY: This property is used by the simple legacy consumer only. When using the high-level KafkaConsumer, the global enable.auto.commit property must be used instead]. If true, periodically commit offset of the last message handed to the application. This committed offset will be used when the process restarts to pick up where it left off. If false, the application will have to call rd_kafka_offset_store() to store an offset (optional). NOTE: There is currently no zookeeper integration, offsets will be written to broker or local file according to offset.store.method. Type: boolean Importance: low C/P: Consumer Only message \u00b6 Property Values Description message.timeout. ms 300000 ( 0 .. 2147483647 ) Local message timeout. This value is only enforced locally and limits the time a produced message waits for successful delivery. A time of 0 is infinite. This is the maximum time librdkafka may use to deliver a message (including retries). Delivery error occurs when either the retry count or the message timeout are exceeded. The message timeout is automatically adjusted to transaction.timeout.ms if transactional.id is configured. Type: integer Importance: high C/P: Producer Only msg_order_cmp \u00b6 Property Values Description msg_order_cmp EXPERIMENTAL : subject to change or removal. DEPRECATED Message queue ordering comparator (set with rd_kafka_topic_conf_set_msg_order_cmp()). Also see queuing.strategy . Type: see dedicated API Importance: low C/P: Producer Only offset \u00b6 Property Values Description offset.store. path . DEPRECATED Path to local file for storing offsets. If the path is a directory a filename will be automatically generated in that directory based on the topic and partition. File-based offset storage will be removed in a future version. Type: string Importance: low C/P: Consumer Only offset.store. method broker ( file, broker ) DEPRECATED Offset commit store method: 'file' - DEPRECATED: local file store (offset.store.path, et.al), 'broker' - broker commit store (requires \"group.id\" to be configured and Apache Kafka 0.8.2 or later on the broker.). Type: enum value Importance: low C/P: Consumer Only offset.store. sync.interval. ms -1 ( -1 .. 86400000 ) DEPRECATED fsync() interval for the offset file, in milliseconds. Use -1 to disable syncing, and 0 for immediate sync after each write. File-based offset storage will be removed in a future version. Type: integer Importance: low C/P: Consumer Only opaque \u00b6 Property Values Description opaque Application opaque (set with rd_kafka_topic_conf_set_opaque()) Type: see dedicated API Importance: low C/P: Both partitioner \u00b6 Property Values Description partitioner consistent_random Partitioner: random - random distribution, consistent - CRC32 hash of key (Empty and NULL keys are mapped to single partition), consistent_random - CRC32 hash of key (Empty and NULL keys are randomly partitioned), murmur2 - Java Producer compatible Murmur2 hash of key (NULL keys are mapped to single partition), murmur2_random - Java Producer compatible Murmur2 hash of key (NULL keys are randomly partitioned. This is functionally equivalent to the default partitioner in the Java Producer.), fnv1a - FNV-1a hash of key (NULL keys are mapped to single partition), fnv1a_random - FNV-1a hash of key (NULL keys are randomly partitioned). Type: string Importance: high C/P: Producer Only partitioner_cb \u00b6 Property Values Description partitioner_cb Custom partitioner callback (set with rd_kafka_topic_conf_set_partitioner_cb()) Type: see dedicated API Importance: low C/P: Producer Only produce \u00b6 Property Values Description produce.offset. report false ( true, false ) DEPRECATED No longer used. Type: boolean Importance: low C/P: Producer Only queuing \u00b6 Property Values Description queuing.strategy fifo ( fifo, lifo ) EXPERIMENTAL : subject to change or removal. DEPRECATED Producer queuing strategy. FIFO preserves produce ordering, while LIFO prioritizes new messages. Type: enum value Importance: low C/P: Producer Only request \u00b6 Property Values Description request.timeout. ms 30000 ( 1 .. 900000 ) The ack timeout of the producer request in milliseconds. This value is only enforced by the broker and relies on request.required.acks being != 0. Type: integer Importance: medium C/P: Producer Only request.required. acks -1 ( -1 .. 1000 ) This field indicates the number of acknowledgements the leader broker must receive from ISR brokers before responding to the request: 0 =Broker does not send any response/ack to client, -1 or all =Broker will block until message is committed by all in sync replicas (ISRs). If there are less than min.insync.replicas (broker configuration) in the ISR set the produce request will fail. Type: integer Importance: high C/P: Producer Only","title":"Configuration"},{"location":"libraries/kafka/configuration/#kafka-configuration-properties","text":"","title":"Kafka Configuration properties"},{"location":"libraries/kafka/configuration/#global-configuration-properties","text":"","title":"GLOBAL configuration properties"},{"location":"libraries/kafka/configuration/#allow","text":"Property Values Description allow.auto. create.topics false ( true, false ) Allow automatic topic creation on the broker when subscribing to or assigning non-existent topics. The broker must also be configured with auto.create.topics.enable=true for this configuraiton to take effect. Note: The default value (false) is different from the Java consumer (true). Requires broker version >= 0.11.0.0, for older broker versions only the broker configuration applies. Type: boolean Importance: low C/P: Consumer Only","title":"allow"},{"location":"libraries/kafka/configuration/#api","text":"Property Values Description api.version. fallback.ms 0 ( 0 .. 604800000 ) Dictates how long the broker.version.fallback fallback is used in the case the ApiVersionRequest fails. NOTE : The ApiVersionRequest is only issued when a new connection to the broker is made (such as after an upgrade). Type: integer Importance: medium C/P: Both api.version. request.timeout. ms 10000 ( 1 .. 300000 ) Timeout for broker API version requests. Type: integer Importance: low C/P: Both api.version. request true ( true, false ) Request broker's supported API versions to adjust functionality to available protocol features. If set to false, or the ApiVersionRequest fails, the fallback version broker.version.fallback will be used. NOTE : Depends on broker version >=0.10.0. If the request is not supported by (an older) broker the broker.version.fallback fallback is used. Type: boolean Importance: high C/P: Both","title":"api"},{"location":"libraries/kafka/configuration/#auto","text":"Property Values Description auto.commit. interval.ms 5000 ( 0 .. 86400000 ) The frequency in milliseconds that the consumer offsets are committed (written) to offset storage. (0 = disable). This setting is used by the high-level consumer. Type: integer Importance: medium C/P: Consumer Only","title":"auto"},{"location":"libraries/kafka/configuration/#background_event_cb","text":"Property Values Description background_event_cb Background queue event callback (set with rd_kafka_conf_set_background_event_cb()) Type: see dedicated API Importance: low C/P: Both","title":"background_event_cb"},{"location":"libraries/kafka/configuration/#batch","text":"Property Values Description batch.size 1000000 ( 1 .. 2147483647 ) Maximum size (in bytes) of all messages batched in one MessageSet, including protocol framing overhead. This limit is applied after the first message has been added to the batch, regardless of the first message's size, this is to ensure that messages that exceed batch.size are produced. The total MessageSet size is also limited by batch.num.messages and message.max.bytes. Type: integer Importance: medium C/P: Producer Only batch.num. messages 10000 ( 1 .. 1000000 ) Maximum number of messages batched in one MessageSet. The total MessageSet size is also limited by batch.size and message.max.bytes. Type: integer Importance: medium C/P: Producer Only","title":"batch"},{"location":"libraries/kafka/configuration/#bootstrap","text":"Property Values Description bootstrap.servers Alias for metadata.broker.list : Initial list of brokers as a CSV list of broker host or host:port. The application may also use rd_kafka_brokers_add() to add brokers during runtime. Type: string Importance: high C/P: Both","title":"bootstrap"},{"location":"libraries/kafka/configuration/#broker","text":"Property Values Description broker.version. fallback 0.10.0 Older broker versions (before 0.10.0) provide no way for a client to query for supported protocol features (ApiVersionRequest, see api.version.request ) making it impossible for the client to know what features it may use. As a workaround a user may set this property to the expected broker version and the client will automatically adjust its feature set accordingly if the ApiVersionRequest fails (or is disabled). The fallback broker version will be used for api.version.fallback.ms . Valid values are: 0.9.0, 0.8.2, 0.8.1, 0.8.0. Any other value >= 0.10, such as 0.10.2.1, enables ApiVersionRequests. Type: string Importance: medium C/P: Both broker.address. family any ( any, v4, v6 ) Allowed broker IP address families: any, v4, v6 Type: enum value Importance: low C/P: Both broker.address. ttl 1000 ( 0 .. 86400000 ) How long to cache the broker address resolving results (milliseconds). Type: integer Importance: low C/P: Both","title":"broker"},{"location":"libraries/kafka/configuration/#builtin","text":"Property Values Description builtin.features gzip, snappy, ssl, sasl, regex, lz4, sasl_gssapi, sasl_plain, sasl_scram, plugins, zstd, sasl_oauthbearer Indicates the builtin features for this build of librdkafka. An application can either query this value or attempt to set it with its list of required features to check for library support. Type: CSV flags Importance: low C/P: Both","title":"builtin"},{"location":"libraries/kafka/configuration/#check","text":"Property Values Description check.crcs false ( true, false ) Verify CRC32 of consumed messages, ensuring no on-the-wire or on-disk corruption to the messages occurred. This check comes at slightly increased CPU usage. Type: boolean Importance: medium C/P: Consumer Only","title":"check"},{"location":"libraries/kafka/configuration/#client","text":"Property Values Description client.rack A rack identifier for this client. This can be any string value which indicates where this client is physically located. It corresponds with the broker config broker.rack . Type: string Importance: low C/P: Both client.id rdkafka Client identifier. Type: string Importance: low C/P: Both","title":"client"},{"location":"libraries/kafka/configuration/#closesocket_cb","text":"Property Values Description closesocket_cb Socket close callback Type: see dedicated API Importance: low C/P: Both","title":"closesocket_cb"},{"location":"libraries/kafka/configuration/#compression","text":"Property Values Description compression.codec none ( none, gzip, snappy, lz4, zstd ) compression codec to use for compressing message sets. This is the default value for all topics, may be overridden by the topic configuration property compression.codec . Type: enum value Importance: medium C/P: Producer Only compression.type none ( none, gzip, snappy, lz4, zstd ) Alias for compression.codec : compression codec to use for compressing message sets. This is the default value for all topics, may be overridden by the topic configuration property compression.codec . Type: enum value Importance: medium C/P: Producer Only","title":"compression"},{"location":"libraries/kafka/configuration/#connections","text":"Property Values Description connections.max. idle.ms 0 ( 0 .. 2147483647 ) Close broker connections after the specified time of inactivity. Disable with 0. If this property is left at its default value some heuristics are performed to determine a suitable default value, this is currently limited to identifying brokers on Azure (see librdkafka issue #3109 for more info). Type: integer Importance: medium C/P: Both","title":"connections"},{"location":"libraries/kafka/configuration/#connect_cb","text":"Property Values Description connect_cb Socket connect callback Type: see dedicated API Importance: low C/P: Both","title":"connect_cb"},{"location":"libraries/kafka/configuration/#consume_cb","text":"Property Values Description consume_cb Message consume callback (set with rd_kafka_conf_set_consume_cb()) Type: see dedicated API Importance: low C/P: Consumer Only","title":"consume_cb"},{"location":"libraries/kafka/configuration/#coordinator","text":"Property Values Description coordinator.query. interval.ms 600000 ( 1 .. 3600000 ) How often to query for the current client group coordinator. If the currently assigned coordinator is down the configured query interval will be divided by ten to more quickly recover in case of coordinator reassignment. Type: integer Importance: low C/P: Consumer Only","title":"coordinator"},{"location":"libraries/kafka/configuration/#debug","text":"Property Values Description debug ( generic, broker, topic, metadata, feature, queue, msg, protocol, cgrp, security, fetch, interceptor, plugin, consumer, admin, eos, mock, assignor, conf, all ) A comma-separated list of debug contexts to enable. Detailed Producer debugging: broker,topic,msg. Consumer: consumer,cgrp,topic,fetch Type: CSV flags Importance: medium C/P: Both","title":"debug"},{"location":"libraries/kafka/configuration/#default_topic_conf","text":"Property Values Description default_topic_conf Default topic configuration for automatically subscribed topics Type: see dedicated API Importance: low C/P: Both","title":"default_topic_conf"},{"location":"libraries/kafka/configuration/#delivery","text":"Property Values Description delivery.report. only.error false ( true, false ) Only provide delivery reports for failed messages. Type: boolean Importance: low C/P: Producer Only","title":"delivery"},{"location":"libraries/kafka/configuration/#dr_cb","text":"Property Values Description dr_cb Delivery report callback (set with rd_kafka_conf_set_dr_cb()) Type: see dedicated API Importance: low C/P: Producer Only","title":"dr_cb"},{"location":"libraries/kafka/configuration/#dr_msg_cb","text":"Property Values Description dr_msg_cb Delivery report callback (set with rd_kafka_conf_set_dr_msg_cb()) Type: see dedicated API Importance: low C/P: Producer Only","title":"dr_msg_cb"},{"location":"libraries/kafka/configuration/#enable","text":"Property Values Description enable.idempotence false ( true, false ) When set to true , the producer will ensure that messages are successfully produced exactly once and in the original produce order. The following configuration properties are adjusted automatically (if not modified by the user) when idempotence is enabled: max.in.flight.requests.per.connection=5 (must be less than or equal to 5), retries=INT32_MAX (must be greater than 0), acks=all , queuing.strategy=fifo . Producer instantation will fail if user-supplied configuration is incompatible. Type: boolean Importance: high C/P: Producer Only enable.gapless. guarantee false ( true, false ) EXPERIMENTAL : subject to change or removal. When set to true , any error that could result in a gap in the produced message series when a batch of messages fails, will raise a fatal error (ERR__GAPLESS_GUARANTEE) and stop the producer. Messages failing due to message.timeout.ms are not covered by this guarantee. Requires enable.idempotence=true . Type: boolean Importance: low C/P: Producer Only enable.random. seed true ( true, false ) If enabled librdkafka will initialize the PRNG with srand(current_time.milliseconds) on the first invocation of rd_kafka_new() (required only if rand_r() is not available on your platform). If disabled the application must call srand() prior to calling rd_kafka_new(). Type: boolean Importance: low C/P: Both enable.auto. commit true ( true, false ) Automatically and periodically commit offsets in the background. Note: setting this to false does not prevent the consumer from fetching previously committed start offsets. To circumvent this behaviour set specific start offsets per partition in the call to assign(). Type: boolean Importance: high C/P: Consumer Only enable.ssl. certificate.verification true ( true, false ) Enable OpenSSL's builtin broker (server) certificate verification. This verification can be extended by the application by implementing a certificate_verify_cb. Type: boolean Importance: low C/P: Both enable.sasl. oauthbearer.unsecure. jwt false ( true, false ) Enable the builtin unsecure JWT OAUTHBEARER token handler if no oauthbearer_refresh_cb has been set. This builtin handler should only be used for development or testing, and not in production. Type: boolean Importance: low C/P: Both enable.partition. eof false ( true, false ) Emit RD_KAFKA_RESP_ERR__PARTITION_EOF event whenever the consumer reaches the end of a partition. Type: boolean Importance: low C/P: Consumer Only enable.auto. offset.store true ( true, false ) Automatically store offset of last message provided to application. The offset store is an in-memory store of the next offset to (auto-)commit for each partition. Type: boolean Importance: high C/P: Consumer Only","title":"enable"},{"location":"libraries/kafka/configuration/#enabled_events","text":"Property Values Description enabled_events 0 ( 0 .. 2147483647 ) See rd_kafka_conf_set_events() Type: integer Importance: low C/P: Both","title":"enabled_events"},{"location":"libraries/kafka/configuration/#error_cb","text":"Property Values Description error_cb Error callback (set with rd_kafka_conf_set_error_cb()) Type: see dedicated API Importance: low C/P: Both","title":"error_cb"},{"location":"libraries/kafka/configuration/#fetch","text":"Property Values Description fetch.min. bytes 1 ( 1 .. 100000000 ) Minimum number of bytes the broker responds with. If fetch.wait.max.ms expires the accumulated data will be sent to the client regardless of this setting. Type: integer Importance: low C/P: Consumer Only fetch.max. bytes 52428800 ( 0 .. 2147483135 ) Maximum amount of data the broker shall return for a Fetch request. Messages are fetched in batches by the consumer and if the first message batch in the first non-empty partition of the Fetch request is larger than this value, then the message batch will still be returned to ensure the consumer can make progress. The maximum message batch size accepted by the broker is defined via message.max.bytes (broker config) or max.message.bytes (broker topic config). fetch.max.bytes is automatically adjusted upwards to be at least message.max.bytes (consumer config). Type: integer Importance: medium C/P: Consumer Only fetch.wait. max.ms 500 ( 0 .. 300000 ) Maximum time the broker may wait to fill the Fetch response with fetch.min.bytes of messages. Type: integer Importance: low C/P: Consumer Only fetch.error. backoff.ms 500 ( 0 .. 300000 ) How long to postpone the next fetch request for a topic+partition in case of a fetch error. Type: integer Importance: medium C/P: Consumer Only fetch.message. max.bytes 1048576 ( 1 .. 1000000000 ) Initial maximum number of bytes per topic+partition to request when fetching messages from the broker. If the client encounters a message larger than this value it will gradually try to increase it until the entire message can be fetched. Type: integer Importance: medium C/P: Consumer Only","title":"fetch"},{"location":"libraries/kafka/configuration/#group","text":"Property Values Description group.id Client group id string. All clients sharing the same group.id belong to the same group. Type: string Importance: high C/P: Consumer Only group.protocol. type consumer Group protocol type. NOTE: Currently, the only supported group protocol type is consumer . Type: string Importance: low C/P: Consumer Only group.instance. id Enable static group membership. Static group members are able to leave and rejoin a group within the configured session.timeout.ms without prompting a group rebalance. This should be used in combination with a larger session.timeout.ms to avoid group rebalances caused by transient unavailability (e.g. process restarts). Requires broker version >= 2.3.0. Type: string Importance: medium C/P: Consumer Only","title":"group"},{"location":"libraries/kafka/configuration/#heartbeat","text":"Property Values Description heartbeat.interval. ms 3000 ( 1 .. 3600000 ) Group session keepalive heartbeat interval. Type: integer Importance: low C/P: Consumer Only","title":"heartbeat"},{"location":"libraries/kafka/configuration/#interceptors","text":"Property Values Description interceptors Interceptors added through rd_kafka_conf_interceptor_add_..() and any configuration handled by interceptors. Type: see dedicated API Importance: low C/P: Both","title":"interceptors"},{"location":"libraries/kafka/configuration/#internal","text":"Property Values Description internal.termination. signal 0 ( 0 .. 128 ) Signal that librdkafka will use to quickly terminate on rd_kafka_destroy(). If this signal is not set then there will be a delay before rd_kafka_wait_destroyed() returns true as internal threads are timing out their system calls. If this signal is set however the delay will be minimal. The application should mask this signal as an internal signal handler is installed. Type: integer Importance: low C/P: Both","title":"internal"},{"location":"libraries/kafka/configuration/#isolation","text":"Property Values Description isolation.level read_committed ( read_uncommitted, read_committed ) Controls how to read messages written transactionally: read_committed - only return transactional messages which have been committed. read_uncommitted - return all messages, even transactional messages which have been aborted. Type: enum value Importance: high C/P: Consumer Only","title":"isolation"},{"location":"libraries/kafka/configuration/#linger","text":"Property Values Description linger.ms 5 ( 0 .. 900000 ) Alias for queue.buffering.max.ms : Delay in milliseconds to wait for messages in the producer queue to accumulate before constructing message batches (MessageSets) to transmit to brokers. A higher value allows larger and more effective (less overhead, improved compression) batches of messages to accumulate at the expense of increased message delivery latency. Type: float Importance: high C/P: Producer Only","title":"linger"},{"location":"libraries/kafka/configuration/#log","text":"Property Values Description log.connection. close true ( true, false ) Log broker disconnects. It might be useful to turn this off when interacting with 0.9 brokers with an aggressive connection.max.idle.ms value. Type: boolean Importance: low C/P: Both log.thread. name true ( true, false ) Print internal thread name in log messages (useful for debugging librdkafka internals) Type: boolean Importance: low C/P: Both log.queue false ( true, false ) Disable spontaneous log_cb from internal librdkafka threads, instead enqueue log messages on queue set with rd_kafka_set_log_queue() and serve log callbacks or events through the standard poll APIs. NOTE : Log messages will linger in a temporary queue until the log queue has been set. Type: boolean Importance: low C/P: Both","title":"log"},{"location":"libraries/kafka/configuration/#log_cb","text":"Property Values Description log_cb Log callback (set with rd_kafka_conf_set_log_cb()) Type: see dedicated API Importance: low C/P: Both","title":"log_cb"},{"location":"libraries/kafka/configuration/#log_level","text":"Property Values Description log_level 6 ( 0 .. 7 ) Logging level (syslog(3) levels) Type: integer Importance: low C/P: Both","title":"log_level"},{"location":"libraries/kafka/configuration/#max","text":"Property Values Description max.partition. fetch.bytes 1048576 ( 1 .. 1000000000 ) Alias for fetch.message.max.bytes : Initial maximum number of bytes per topic+partition to request when fetching messages from the broker. If the client encounters a message larger than this value it will gradually try to increase it until the entire message can be fetched. Type: integer Importance: medium C/P: Consumer Only max.poll. interval.ms 300000 ( 1 .. 86400000 ) Maximum allowed time between calls to consume messages (e.g., rd_kafka_consumer_poll()) for high-level consumers. If this interval is exceeded the consumer is considered failed and the group will rebalance in order to reassign the partitions to another consumer group member. Warning: Offset commits may be not possible at this point. Note: It is recommended to set enable.auto.offset.store=false for long-time processing applications and then explicitly store offsets (using offsets_store()) after message processing, to make sure offsets are not auto-committed prior to processing has finished. The interval is checked two times per second. See KIP-62 for more information. Type: integer Importance: high C/P: Consumer Only max.in. flight 1000000 ( 1 .. 1000000 ) Alias for max.in.flight.requests.per.connection : Maximum number of in-flight requests per broker connection. This is a generic property applied to all broker communication, however it is primarily relevant to produce requests. In particular, note that other mechanisms limit the number of outstanding consumer fetch request per broker to one. Type: integer Importance: low C/P: Both max.in. flight.requests. per.connection 1000000 ( 1 .. 1000000 ) Maximum number of in-flight requests per broker connection. This is a generic property applied to all broker communication, however it is primarily relevant to produce requests. In particular, note that other mechanisms limit the number of outstanding consumer fetch request per broker to one. Type: integer Importance: low C/P: Both","title":"max"},{"location":"libraries/kafka/configuration/#message","text":"Property Values Description message.max. bytes 1000000 ( 1000 .. 1000000000 ) Maximum Kafka protocol request message size. Due to differing framing overhead between protocol versions the producer is unable to reliably enforce a strict max message limit at produce time and may exceed the maximum size by one message in protocol ProduceRequests, the broker will enforce the the topic's max.message.bytes limit (see Apache Kafka documentation). Type: integer Importance: medium C/P: Both message.copy. max.bytes 65535 ( 0 .. 1000000000 ) Maximum size for message to be copied to buffer. Messages larger than this will be passed by reference (zero-copy) at the expense of larger iovecs. Type: integer Importance: low C/P: Both message.send. max.retries 2147483647 ( 0 .. 2147483647 ) How many times to retry sending a failing Message. Note: retrying may cause reordering unless enable.idempotence is set to true. Type: integer Importance: high C/P: Producer Only","title":"message"},{"location":"libraries/kafka/configuration/#metadata","text":"Property Values Description metadata.request. timeout.ms 60000 ( 10 .. 900000 ) Non-topic request timeout in milliseconds. This is for metadata requests, etc. Type: integer Importance: low C/P: Both metadata.broker. list Initial list of brokers as a CSV list of broker host or host:port. The application may also use rd_kafka_brokers_add() to add brokers during runtime. Type: string Importance: high C/P: Both metadata.max. age.ms 900000 ( 1 .. 86400000 ) Metadata cache max age. Defaults to topic.metadata.refresh.interval.ms * 3 Type: integer Importance: low C/P: Both","title":"metadata"},{"location":"libraries/kafka/configuration/#oauthbearer_token_refresh_cb","text":"Property Values Description oauthbearer_token_refresh_cb SASL/OAUTHBEARER token refresh callback (set with rd_kafka_conf_set_oauthbearer_token_refresh_cb(), triggered by rd_kafka_poll(), et.al. This callback will be triggered when it is time to refresh the client's OAUTHBEARER token. Type: see dedicated API Importance: low C/P: Both","title":"oauthbearer_token_refresh_cb"},{"location":"libraries/kafka/configuration/#offset","text":"Property Values Description offset.store. method broker ( none, file, broker ) DEPRECATED Offset commit store method: 'file' - DEPRECATED: local file store (offset.store.path, et.al), 'broker' - broker commit store (requires Apache Kafka 0.8.2 or later on the broker). Type: enum value Importance: low C/P: Consumer Only","title":"offset"},{"location":"libraries/kafka/configuration/#offset_commit_cb","text":"Property Values Description offset_commit_cb Offset commit result propagation callback. (set with rd_kafka_conf_set_offset_commit_cb()) Type: see dedicated API Importance: low C/P: Consumer Only","title":"offset_commit_cb"},{"location":"libraries/kafka/configuration/#opaque","text":"Property Values Description opaque Application opaque (set with rd_kafka_conf_set_opaque()) Type: see dedicated API Importance: low C/P: Both","title":"opaque"},{"location":"libraries/kafka/configuration/#open_cb","text":"Property Values Description open_cb File open callback to provide race-free CLOEXEC Type: see dedicated API Importance: low C/P: Both","title":"open_cb"},{"location":"libraries/kafka/configuration/#partition","text":"Property Values Description partition.assignment. strategy range,roundrobin The name of one or more partition assignment strategies. The elected group leader will use a strategy supported by all members of the group to assign partitions to group members. If there is more than one eligible strategy, preference is determined by the order of this list (strategies earlier in the list have higher priority). Cooperative and non-cooperative (eager) strategies must not be mixed. Available strategies: range, roundrobin, cooperative-sticky. Type: string Importance: medium C/P: Consumer Only","title":"partition"},{"location":"libraries/kafka/configuration/#plugin","text":"Property Values Description plugin.library. paths List of plugin libraries to load (; separated). The library search path is platform dependent (see dlopen(3) for Unix and LoadLibrary() for Windows). If no filename extension is specified the platform-specific extension (such as .dll or .so) will be appended automatically. Type: string Importance: low C/P: Both","title":"plugin"},{"location":"libraries/kafka/configuration/#queue","text":"Property Values Description queue.buffering. max.messages 100000 ( 1 .. 10000000 ) Maximum number of messages allowed on the producer queue. This queue is shared by all topics and partitions. Type: integer Importance: high C/P: Producer Only queue.buffering. max.kbytes 1048576 ( 1 .. 2147483647 ) Maximum total message size sum allowed on the producer queue. This queue is shared by all topics and partitions. This property has higher priority than queue.buffering.max.messages. Type: integer Importance: high C/P: Producer Only queue.buffering. max.ms 5 ( 0 .. 900000 ) Delay in milliseconds to wait for messages in the producer queue to accumulate before constructing message batches (MessageSets) to transmit to brokers. A higher value allows larger and more effective (less overhead, improved compression) batches of messages to accumulate at the expense of increased message delivery latency. Type: float Importance: high C/P: Producer Only queue.buffering. backpressure.threshold 1 ( 1 .. 1000000 ) The threshold of outstanding not yet transmitted broker requests needed to backpressure the producer's message accumulator. If the number of not yet transmitted requests equals or exceeds this number, produce request creation that would have otherwise been triggered (for example, in accordance with linger.ms) will be delayed. A lower number yields larger and more effective batches. A higher value can improve latency when using compression on slow machines. Type: integer Importance: low C/P: Producer Only","title":"queue"},{"location":"libraries/kafka/configuration/#queued","text":"Property Values Description queued.min. messages 100000 ( 1 .. 10000000 ) Minimum number of messages per topic+partition librdkafka tries to maintain in the local consumer queue. Type: integer Importance: medium C/P: Consumer Only queued.max. messages.kbytes 65536 ( 1 .. 2097151 ) Maximum number of kilobytes of queued pre-fetched messages in the local consumer queue. If using the high-level consumer this setting applies to the single consumer queue, regardless of the number of partitions. When using the legacy simple consumer or when separate partition queues are used this setting applies per partition. This value may be overshot by fetch.message.max.bytes. This property has higher priority than queued.min.messages. Type: integer Importance: medium C/P: Consumer Only","title":"queued"},{"location":"libraries/kafka/configuration/#rebalance_cb","text":"Property Values Description rebalance_cb Called after consumer group has been rebalanced (set with rd_kafka_conf_set_rebalance_cb()) Type: see dedicated API Importance: low C/P: Consumer Only","title":"rebalance_cb"},{"location":"libraries/kafka/configuration/#receive","text":"Property Values Description receive.message. max.bytes 100000000 ( 1000 .. 2147483647 ) Maximum Kafka protocol response message size. This serves as a safety precaution to avoid memory exhaustion in case of protocol hickups. This value must be at least fetch.max.bytes + 512 to allow for protocol overhead; the value is adjusted automatically unless the configuration property is explicitly set. Type: integer Importance: medium C/P: Both","title":"receive"},{"location":"libraries/kafka/configuration/#reconnect","text":"Property Values Description reconnect.backoff. ms 100 ( 0 .. 3600000 ) The initial time to wait before reconnecting to a broker after the connection has been closed. The time is increased exponentially until reconnect.backoff.max.ms is reached. -25% to +50% jitter is applied to each reconnect backoff. A value of 0 disables the backoff and reconnects immediately. Type: integer Importance: medium C/P: Both reconnect.backoff. jitter.ms 0 ( 0 .. 3600000 ) DEPRECATED No longer used. See reconnect.backoff.ms and reconnect.backoff.max.ms . Type: integer Importance: low C/P: Both reconnect.backoff. max.ms 10000 ( 0 .. 3600000 ) The maximum time to wait before reconnecting to a broker after the connection has been closed. Type: integer Importance: medium C/P: Both","title":"reconnect"},{"location":"libraries/kafka/configuration/#retries","text":"Property Values Description retries 2147483647 ( 0 .. 2147483647 ) Alias for message.send.max.retries : How many times to retry sending a failing Message. Note: retrying may cause reordering unless enable.idempotence is set to true. Type: integer Importance: high C/P: Producer Only","title":"retries"},{"location":"libraries/kafka/configuration/#retry","text":"Property Values Description retry.backoff. ms 100 ( 1 .. 300000 ) The backoff time in milliseconds before retrying a protocol request. Type: integer Importance: medium C/P: Producer Only","title":"retry"},{"location":"libraries/kafka/configuration/#sasl","text":"Property Values Description sasl.password SASL password for use with the PLAIN and SASL-SCRAM-.. mechanism Type: string Importance: high C/P: Both sasl.username SASL username for use with the PLAIN and SASL-SCRAM-.. mechanisms Type: string Importance: high C/P: Both sasl.kerberos. min.time. before.relogin 60000 ( 0 .. 86400000 ) Minimum time in milliseconds between key refresh attempts. Disable automatic key refresh by setting this property to 0. Type: integer Importance: low C/P: Both sasl.kerberos. keytab Path to Kerberos keytab file. This configuration property is only used as a variable in sasl.kerberos.kinit.cmd as ... -t \"%{sasl.kerberos.keytab}\" . Type: string Importance: low C/P: Both sasl.kerberos. kinit.cmd kinit -R -t \"%{sasl.kerberos.keytab}\" -k %{sasl.kerberos.principal} \\ kinit -t \"%{sasl.kerberos.keytab}\" -k %{sasl.kerberos.principal} Importance: * C/P: *Both sasl.kerberos. principal kafkaclient This client's Kerberos principal name. (Not supported on Windows, will use the logon user's principal). Type: string Importance: low C/P: Both sasl.kerberos. service.name kafka Kerberos principal name that Kafka runs as, not including /hostname@REALM Type: string Importance: low C/P: Both sasl.mechanisms GSSAPI SASL mechanism to use for authentication. Supported: GSSAPI, PLAIN, SCRAM-SHA-256, SCRAM-SHA-512, OAUTHBEARER. NOTE : Despite the name only one mechanism must be configured. Type: string Importance: high C/P: Both sasl.oauthbearer. config SASL/OAUTHBEARER configuration. The format is implementation-dependent and must be parsed accordingly. The default unsecured token implementation (see https://tools.ietf.org/html/rfc7515#appendix-A.5 ) recognizes space-separated name=value pairs with valid names including principalClaimName, principal, scopeClaimName, scope, and lifeSeconds. The default value for principalClaimName is \"sub\", the default value for scopeClaimName is \"scope\", and the default value for lifeSeconds is 3600. The scope value is CSV format with the default value being no/empty scope. For example: principalClaimName=azp principal=admin scopeClaimName=roles scope=role1,role2 lifeSeconds=600 . In addition, SASL extensions can be communicated to the broker via extension_NAME=value . For example: principal=admin extension_traceId=123 Type: string Importance: low C/P: Both sasl.mechanism GSSAPI Alias for sasl.mechanisms : SASL mechanism to use for authentication. Supported: GSSAPI, PLAIN, SCRAM-SHA-256, SCRAM-SHA-512, OAUTHBEARER. NOTE : Despite the name only one mechanism must be configured. Type: string Importance: high C/P: Both","title":"sasl"},{"location":"libraries/kafka/configuration/#security","text":"Property Values Description security.protocol plaintext ( plaintext, ssl, sasl_plaintext, sasl_ssl ) Protocol used to communicate with brokers. Type: enum value Importance: high C/P: Both","title":"security"},{"location":"libraries/kafka/configuration/#session","text":"Property Values Description session.timeout. ms 10000 ( 1 .. 3600000 ) Client group session and failure detection timeout. The consumer sends periodic heartbeats (heartbeat.interval.ms) to indicate its liveness to the broker. If no hearts are received by the broker for a group member within the session timeout, the broker will remove the consumer from the group and trigger a rebalance. The allowed range is configured with the broker configuration properties group.min.session.timeout.ms and group.max.session.timeout.ms . Also see max.poll.interval.ms . Type: integer Importance: high C/P: Consumer Only","title":"session"},{"location":"libraries/kafka/configuration/#socket","text":"Property Values Description socket.receive. buffer.bytes 0 ( 0 .. 100000000 ) Broker socket receive buffer size. System default is used if 0. Type: integer Importance: low C/P: Both socket.keepalive. enable false ( true, false ) Enable TCP keep-alives (SO_KEEPALIVE) on broker sockets Type: boolean Importance: low C/P: Both socket.timeout. ms 60000 ( 10 .. 300000 ) Default timeout for network requests. Producer: ProduceRequests will use the lesser value of socket.timeout.ms and remaining message.timeout.ms for the first message in the batch. Consumer: FetchRequests will use fetch.wait.max.ms + socket.timeout.ms . Admin: Admin requests will use socket.timeout.ms or explicitly set rd_kafka_AdminOptions_set_operation_timeout() value. Type: integer Importance: low C/P: Both socket.nagle. disable false ( true, false ) Disable the Nagle algorithm (TCP_NODELAY) on broker sockets. Type: boolean Importance: low C/P: Both socket.blocking. max.ms 1000 ( 1 .. 60000 ) DEPRECATED No longer used. Type: integer Importance: low C/P: Both socket.send. buffer.bytes 0 ( 0 .. 100000000 ) Broker socket send buffer size. System default is used if 0. Type: integer Importance: low C/P: Both socket.max. fails 1 ( 0 .. 1000000 ) Disconnect from broker when this number of send failures (e.g., timed out requests) is reached. Disable with 0. WARNING: It is highly recommended to leave this setting at its default value of 1 to avoid the client and broker to become desynchronized in case of request timeouts. NOTE: The connection is automatically re-established. Type: integer Importance: low C/P: Both","title":"socket"},{"location":"libraries/kafka/configuration/#socket_cb","text":"Property Values Description socket_cb Socket creation callback to provide race-free CLOEXEC Type: see dedicated API Importance: low C/P: Both","title":"socket_cb"},{"location":"libraries/kafka/configuration/#ssl","text":"Property Values Description ssl.engine. location Path to OpenSSL engine library. OpenSSL >= 1.1.0 required. Type: string Importance: low C/P: Both ssl.cipher. suites A cipher suite is a named combination of authentication, encryption, MAC and key exchange algorithm used to negotiate the security settings for a network connection using TLS or SSL network protocol. See manual page for ciphers(1) and `SSL_CTX_set_cipher_list(3). Type: string Importance: low C/P: Both ssl.key. password Private key passphrase (for use with ssl.key.location and set_ssl_cert() ) Type: string Importance: low C/P: Both ssl.key. pem Client's private key string (PEM format) used for authentication. Type: string Importance: low C/P: Both ssl.certificate. pem Client's public key string (PEM format) used for authentication. Type: string Importance: low C/P: Both ssl.curves. list The supported-curves extension in the TLS ClientHello message specifies the curves (standard/named, or 'explicit' GF(2^k) or GF(p)) the client is willing to have the server use. See manual page for SSL_CTX_set1_curves_list(3) . OpenSSL >= 1.0.2 required. Type: string Importance: low C/P: Both ssl.certificate. verify_cb Callback to verify the broker certificate chain. Type: see dedicated API Importance: low C/P: Both ssl.endpoint. identification.algorithm none ( none, https ) Endpoint identification algorithm to validate broker hostname using broker certificate. https - Server (broker) hostname verification as specified in RFC2818. none - No endpoint verification. OpenSSL >= 1.0.2 required. Type: enum value Importance: low C/P: Both ssl.sigalgs. list The client uses the TLS ClientHello signature_algorithms extension to indicate to the server which signature/hash algorithm pairs may be used in digital signatures. See manual page for SSL_CTX_set1_sigalgs_list(3) . OpenSSL >= 1.0.2 required. Type: string Importance: low C/P: Both ssl.certificate. location Path to client's public key (PEM) used for authentication. Type: string Importance: low C/P: Both ssl.engine. id dynamic OpenSSL engine id is the name used for loading engine. Type: string Importance: low C/P: Both ssl.key. location Path to client's private key (PEM) used for authentication. Type: string Importance: low C/P: Both ssl.keystore. password Client's keystore ( PKCS#12 ) password. Type: string Importance: low C/P: Both ssl.keystore. location Path to client's keystore ( PKCS#12 ) used for authentication. Type: string Importance: low C/P: Both ssl.crl. location Path to CRL for verifying broker's certificate validity. Type: string Importance: low C/P: Both ssl.ca. certificate.stores Root Comma-separated list of Windows Certificate stores to load CA certificates from. Certificates will be loaded in the same order as stores are specified. If no certificates can be loaded from any of the specified stores an error is logged and the OpenSSL library's default CA location is used instead. Store names are typically one or more of: MY, Root, Trust, CA. Type: string Importance: low C/P: Both ssl.ca. location File or directory path to CA certificate(s) for verifying the broker's key. Defaults: On Windows the system's CA certificates are automatically looked up in the Windows Root certificate store. On Mac OSX this configuration defaults to probe . It is recommended to install openssl using Homebrew, to provide CA certificates. On Linux install the distribution's ca-certificates package. If OpenSSL is statically linked or ssl.ca.location is set to probe a list of standard paths will be probed and the first one found will be used as the default CA certificate location path. If OpenSSL is dynamically linked the OpenSSL library's default path will be used (see OPENSSLDIR in openssl version -a ). Type: string Importance: low C/P: Both","title":"ssl"},{"location":"libraries/kafka/configuration/#ssl_ca","text":"Property Values Description ssl_ca CA certificate as set by rd_kafka_conf_set_ssl_cert() Type: see dedicated API Importance: low C/P: Both","title":"ssl_ca"},{"location":"libraries/kafka/configuration/#ssl_certificate","text":"Property Values Description ssl_certificate Client's public key as set by rd_kafka_conf_set_ssl_cert() Type: see dedicated API Importance: low C/P: Both","title":"ssl_certificate"},{"location":"libraries/kafka/configuration/#ssl_engine_callback_data","text":"Property Values Description ssl_engine_callback_data OpenSSL engine callback data (set with rd_kafka_conf_set_engine_callback_data()). Type: pointer Importance: low C/P: Both","title":"ssl_engine_callback_data"},{"location":"libraries/kafka/configuration/#ssl_key","text":"Property Values Description ssl_key Client's private key as set by rd_kafka_conf_set_ssl_cert() Type: see dedicated API Importance: low C/P: Both","title":"ssl_key"},{"location":"libraries/kafka/configuration/#statistics","text":"Property Values Description statistics.interval. ms 0 ( 0 .. 86400000 ) librdkafka statistics emit interval. The application also needs to register a stats callback using rd_kafka_conf_set_stats_cb() . The granularity is 1000ms. A value of 0 disables statistics. Type: integer Importance: high C/P: Both","title":"statistics"},{"location":"libraries/kafka/configuration/#stats_cb","text":"Property Values Description stats_cb Statistics callback (set with rd_kafka_conf_set_stats_cb()) Type: see dedicated API Importance: low C/P: Both","title":"stats_cb"},{"location":"libraries/kafka/configuration/#sticky","text":"Property Values Description sticky.partitioning. linger.ms 10 ( 0 .. 900000 ) Delay in milliseconds to wait to assign new sticky partitions for each topic. By default, set to double the time of linger.ms. To disable sticky behavior, set to 0. This behavior affects messages with the key NULL in all cases, and messages with key lengths of zero when the consistent_random partitioner is in use. These messages would otherwise be assigned randomly. A higher value allows for more effective batching of these messages. Type: integer Importance: low C/P: Producer Only","title":"sticky"},{"location":"libraries/kafka/configuration/#throttle_cb","text":"Property Values Description throttle_cb Throttle callback (set with rd_kafka_conf_set_throttle_cb()) Type: see dedicated API Importance: low C/P: Both","title":"throttle_cb"},{"location":"libraries/kafka/configuration/#topic","text":"Property Values Description topic.metadata. refresh.interval. ms 300000 ( -1 .. 3600000 ) Period of time in milliseconds at which topic and broker metadata is refreshed in order to proactively discover any new brokers, topics, partitions or partition leader changes. Use -1 to disable the intervalled refresh (not recommended). If there are no locally referenced topics (no topic objects created, no messages produced, no subscription or no assignment) then only the broker list will be refreshed every interval but no more often than every 10s. Type: integer Importance: low C/P: Both topic.blacklist Topic blacklist, a comma-separated list of regular expressions for matching topic names that should be ignored in broker metadata information as if the topics did not exist. Type: pattern list Importance: low C/P: Both topic.metadata. propagation.max. ms 30000 ( 0 .. 3600000 ) Apache Kafka topic creation is asynchronous and it takes some time for a new topic to propagate throughout the cluster to all brokers. If a client requests topic metadata after manual topic creation but before the topic has been fully propagated to the broker the client is requesting metadata from, the topic will seem to be non-existent and the client will mark the topic as such, failing queued produced messages with ERR__UNKNOWN_TOPIC . This setting delays marking a topic as non-existent until the configured propagation max time has passed. The maximum propagation time is calculated from the time the topic is first referenced in the client, e.g., on produce(). Type: integer Importance: low C/P: Both topic.metadata. refresh.sparse true ( true, false ) Sparse metadata requests (consumes less network bandwidth) Type: boolean Importance: low C/P: Both topic.metadata. refresh.fast. cnt 10 ( 0 .. 1000 ) DEPRECATED No longer used. Type: integer Importance: low C/P: Both topic.metadata. refresh.fast. interval.ms 250 ( 1 .. 60000 ) When a topic loses its leader a new metadata request will be enqueued with this initial interval, exponentially increasing until the topic metadata has been refreshed. This is used to recover quickly from transitioning leader brokers. Type: integer Importance: low C/P: Both","title":"topic"},{"location":"libraries/kafka/configuration/#transaction","text":"Property Values Description transaction.timeout. ms 60000 ( 1000 .. 2147483647 ) The maximum amount of time in milliseconds that the transaction coordinator will wait for a transaction status update from the producer before proactively aborting the ongoing transaction. If this value is larger than the transaction.max.timeout.ms setting in the broker, the init_transactions() call will fail with ERR_INVALID_TRANSACTION_TIMEOUT. The transaction timeout automatically adjusts message.timeout.ms and socket.timeout.ms , unless explicitly configured in which case they must not exceed the transaction timeout ( socket.timeout.ms must be at least 100ms lower than transaction.timeout.ms ). This is also the default timeout value if no timeout (-1) is supplied to the transactional API methods. Type: integer Importance: medium C/P: Producer Only","title":"transaction"},{"location":"libraries/kafka/configuration/#transactional","text":"Property Values Description transactional.id Enables the transactional producer. The transactional.id is used to identify the same transactional producer instance across process restarts. It allows the producer to guarantee that transactions corresponding to earlier instances of the same producer have been finalized prior to starting any new transactions, and that any zombie instances are fenced off. If no transactional.id is provided, then the producer is limited to idempotent delivery (if enable.idempotence is set). Requires broker version >= 0.11.0. Type: string Importance: high C/P: Producer Only","title":"transactional"},{"location":"libraries/kafka/configuration/#topic-configuration-properties","text":"","title":"TOPIC configuration properties"},{"location":"libraries/kafka/configuration/#acks","text":"Property Values Description acks -1 ( -1 .. 1000 ) Alias for request.required.acks : This field indicates the number of acknowledgements the leader broker must receive from ISR brokers before responding to the request: 0 =Broker does not send any response/ack to client, -1 or all =Broker will block until message is committed by all in sync replicas (ISRs). If there are less than min.insync.replicas (broker configuration) in the ISR set the produce request will fail. Type: integer Importance: high C/P: Producer Only","title":"acks"},{"location":"libraries/kafka/configuration/#auto_1","text":"Property Values Description auto.offset. reset largest ( smallest, earliest, beginning, largest, latest, end, error ) Action to take when there is no initial offset in offset store or the desired offset is out of range: 'smallest','earliest' - automatically reset the offset to the smallest offset, 'largest','latest' - automatically reset the offset to the largest offset, 'error' - trigger an error (ERR__AUTO_OFFSET_RESET) which is retrieved by consuming messages and checking 'message->err'. Type: enum value Importance: high C/P: Consumer Only auto.commit. interval.ms 60000 ( 10 .. 86400000 ) [ LEGACY PROPERTY: This setting is used by the simple legacy consumer only. When using the high-level KafkaConsumer, the global auto.commit.interval.ms property must be used instead]. The frequency in milliseconds that the consumer offsets are committed (written) to offset storage. Type: integer Importance: high C/P: Consumer Only auto.commit. enable true ( true, false ) DEPRECATED [ LEGACY PROPERTY: This property is used by the simple legacy consumer only. When using the high-level KafkaConsumer, the global enable.auto.commit property must be used instead]. If true, periodically commit offset of the last message handed to the application. This committed offset will be used when the process restarts to pick up where it left off. If false, the application will have to call rd_kafka_offset_store() to store an offset (optional). NOTE: There is currently no zookeeper integration, offsets will be written to broker or local file according to offset.store.method. Type: boolean Importance: low C/P: Consumer Only","title":"auto"},{"location":"libraries/kafka/configuration/#compression_1","text":"Property Values Description compression.level -1 ( -1 .. 12 ) Compression level parameter for algorithm selected by configuration property compression.codec . Higher values will result in better compression at the cost of more CPU usage. Usable range is algorithm-dependent: [0-9] for gzip; [0-12] for lz4; only 0 for snappy; -1 = codec-dependent default compression level. Type: integer Importance: medium C/P: Producer Only compression.type none ( none, gzip, snappy, lz4, zstd ) Alias for compression.codec : compression codec to use for compressing message sets. This is the default value for all topics, may be overridden by the topic configuration property compression.codec . Type: enum value Importance: medium C/P: Producer Only compression.codec inherit ( none, gzip, snappy, lz4, zstd, inherit ) Compression codec to use for compressing message sets. inherit = inherit global compression.codec configuration. Type: enum value Importance: high C/P: Producer Only","title":"compression"},{"location":"libraries/kafka/configuration/#consume","text":"Property Values Description consume.callback. max.messages 0 ( 0 .. 1000000 ) Maximum number of messages to dispatch in one rd_kafka_consume_callback*() call (0 = unlimited) Type: integer Importance: low C/P: Consumer Only","title":"consume"},{"location":"libraries/kafka/configuration/#delivery_1","text":"Property Values Description delivery.timeout. ms 300000 ( 0 .. 2147483647 ) Alias for message.timeout.ms : Local message timeout. This value is only enforced locally and limits the time a produced message waits for successful delivery. A time of 0 is infinite. This is the maximum time librdkafka may use to deliver a message (including retries). Delivery error occurs when either the retry count or the message timeout are exceeded. The message timeout is automatically adjusted to transaction.timeout.ms if transactional.id is configured. Type: integer Importance: high C/P: Producer Only","title":"delivery"},{"location":"libraries/kafka/configuration/#enable_1","text":"Property Values Description enable.auto. commit true ( true, false ) DEPRECATED Alias for auto.commit.enable : [ LEGACY PROPERTY: This property is used by the simple legacy consumer only. When using the high-level KafkaConsumer, the global enable.auto.commit property must be used instead]. If true, periodically commit offset of the last message handed to the application. This committed offset will be used when the process restarts to pick up where it left off. If false, the application will have to call rd_kafka_offset_store() to store an offset (optional). NOTE: There is currently no zookeeper integration, offsets will be written to broker or local file according to offset.store.method. Type: boolean Importance: low C/P: Consumer Only","title":"enable"},{"location":"libraries/kafka/configuration/#message_1","text":"Property Values Description message.timeout. ms 300000 ( 0 .. 2147483647 ) Local message timeout. This value is only enforced locally and limits the time a produced message waits for successful delivery. A time of 0 is infinite. This is the maximum time librdkafka may use to deliver a message (including retries). Delivery error occurs when either the retry count or the message timeout are exceeded. The message timeout is automatically adjusted to transaction.timeout.ms if transactional.id is configured. Type: integer Importance: high C/P: Producer Only","title":"message"},{"location":"libraries/kafka/configuration/#msg_order_cmp","text":"Property Values Description msg_order_cmp EXPERIMENTAL : subject to change or removal. DEPRECATED Message queue ordering comparator (set with rd_kafka_topic_conf_set_msg_order_cmp()). Also see queuing.strategy . Type: see dedicated API Importance: low C/P: Producer Only","title":"msg_order_cmp"},{"location":"libraries/kafka/configuration/#offset_1","text":"Property Values Description offset.store. path . DEPRECATED Path to local file for storing offsets. If the path is a directory a filename will be automatically generated in that directory based on the topic and partition. File-based offset storage will be removed in a future version. Type: string Importance: low C/P: Consumer Only offset.store. method broker ( file, broker ) DEPRECATED Offset commit store method: 'file' - DEPRECATED: local file store (offset.store.path, et.al), 'broker' - broker commit store (requires \"group.id\" to be configured and Apache Kafka 0.8.2 or later on the broker.). Type: enum value Importance: low C/P: Consumer Only offset.store. sync.interval. ms -1 ( -1 .. 86400000 ) DEPRECATED fsync() interval for the offset file, in milliseconds. Use -1 to disable syncing, and 0 for immediate sync after each write. File-based offset storage will be removed in a future version. Type: integer Importance: low C/P: Consumer Only","title":"offset"},{"location":"libraries/kafka/configuration/#opaque_1","text":"Property Values Description opaque Application opaque (set with rd_kafka_topic_conf_set_opaque()) Type: see dedicated API Importance: low C/P: Both","title":"opaque"},{"location":"libraries/kafka/configuration/#partitioner","text":"Property Values Description partitioner consistent_random Partitioner: random - random distribution, consistent - CRC32 hash of key (Empty and NULL keys are mapped to single partition), consistent_random - CRC32 hash of key (Empty and NULL keys are randomly partitioned), murmur2 - Java Producer compatible Murmur2 hash of key (NULL keys are mapped to single partition), murmur2_random - Java Producer compatible Murmur2 hash of key (NULL keys are randomly partitioned. This is functionally equivalent to the default partitioner in the Java Producer.), fnv1a - FNV-1a hash of key (NULL keys are mapped to single partition), fnv1a_random - FNV-1a hash of key (NULL keys are randomly partitioned). Type: string Importance: high C/P: Producer Only","title":"partitioner"},{"location":"libraries/kafka/configuration/#partitioner_cb","text":"Property Values Description partitioner_cb Custom partitioner callback (set with rd_kafka_topic_conf_set_partitioner_cb()) Type: see dedicated API Importance: low C/P: Producer Only","title":"partitioner_cb"},{"location":"libraries/kafka/configuration/#produce","text":"Property Values Description produce.offset. report false ( true, false ) DEPRECATED No longer used. Type: boolean Importance: low C/P: Producer Only","title":"produce"},{"location":"libraries/kafka/configuration/#queuing","text":"Property Values Description queuing.strategy fifo ( fifo, lifo ) EXPERIMENTAL : subject to change or removal. DEPRECATED Producer queuing strategy. FIFO preserves produce ordering, while LIFO prioritizes new messages. Type: enum value Importance: low C/P: Producer Only","title":"queuing"},{"location":"libraries/kafka/configuration/#request","text":"Property Values Description request.timeout. ms 30000 ( 1 .. 900000 ) The ack timeout of the producer request in milliseconds. This value is only enforced by the broker and relies on request.required.acks being != 0. Type: integer Importance: medium C/P: Producer Only request.required. acks -1 ( -1 .. 1000 ) This field indicates the number of acknowledgements the leader broker must receive from ISR brokers before responding to the request: 0 =Broker does not send any response/ack to client, -1 or all =Broker will block until message is committed by all in sync replicas (ISRs). If there are less than min.insync.replicas (broker configuration) in the ISR set the produce request will fail. Type: integer Importance: high C/P: Producer Only","title":"request"},{"location":"libraries/kafka/kafka/","text":"Kafka Client Library \u00b6 The Kafka Client in this repo consists of an ABL wrapper around the Kafka C++ Client (librdkafka.1.6.1) as well as other supporting classes. The code supports both Windows 64-bit and Linux. Kafka Client \u00b6 The Kafka Client in this repository consists of an ABL wrapper around the Kafka C++ Client (librdkafka.1.6.1) as well as other supporting classes. The code supports both Windows 64-bit and Linux. Install the C++ client for the target operating system: The Kafka C++ Client can be obtained from NuGet the package: https://www.nuget.org/packages/librdkafka.redist/ nuget install librdkafka.redist -Version 1.6.1 For Windows, copy the following dlls into the root of the project: librdkafka.dll librdkafkacpp.dll libzstd.dll msvcp120.dll msvcr120.dll zlib.dll For Linux/Unix, copy the appropriate shared library for your flavor of OS. For example centos7-librdkafka.so . Configuring the Code \u00b6 The code will need to be configured to work with your unique environment. abl/kafka/librdkafka.cls : Adjust the path to where the Kafka libraries are stored (OS specific). &if opsys begins \"WIN\":u &then &scoped-define SharedLibrary Z:\\Development\\GitHub\\OpenABL\\librdkafka.dll &else &scoped-define SharedLibrary kafka/librdkafka.so &endif abl/kafka/unit/supporting/Configuration.cls : Make any desired changes, but bootstrap_servers must have the same value as the Kafka service. If using Docker as described below, use the same value as the KAFKA_ADVERTISED_LISTENERS=PLAINTEXT:// :9092 setting. bootstrap_servers = \"<kafka hostname>:9092\":u Kafka using Docker ( Bitnami ) \u00b6 The following can be used to setup Docker containers for developing and testing the Kafka Client. Replace with either the name of the host/computer or use localhost. docker-compose.yml version: \"3\" services: zookeeper: image: 'bitnami/zookeeper:latest' ports: - '2181:2181' environment: - ALLOW_ANONYMOUS_LOGIN=yes kafka: image: 'bitnami/kafka:latest' ports: - '9092:9092' environment: - KAFKA_BROKER_ID=1 - KAFKA_LISTENERS=PLAINTEXT://:9092 - KAFKA_ADVERTISED_LISTENERS=PLAINTEXT://<MyComputerName>:9092 - KAFKA_ZOOKEEPER_CONNECT=zookeeper:2181 - ALLOW_PLAINTEXT_LISTENER=yes depends_on: - zookeeper To start the containers execute the following command in the same directory as the docker-compose.yml file: docker-compose up -d To stop the containers use the following command: docker-compose down Testing Kafka using Console \u00b6 You can use the Kafka console client to produce and consume messages to confirm that Kafka is setup properly. To get access to the tools, download Kafka from the Apache website. You don't need to install or configuration anything, just execute the scripts below. Replace :9092 with the value used in the environment section in the docker-compose.yml file. Create a topic in Kafka. kafka-topics.sh --create --topic someevent --bootstrap-server <MyComputerName>:9092 Publish messages to Kafka topic someevent . Each line represents a message, use ctrl-c to stop publishing messages. kafka-console-producer.sh --topic someevent --bootstrap-server <MyComputerName>:9092 Consume message from the Kafka topic someevent . Use ctrl-c to stop consuming messages. kafka-console-consumer.sh --topic someevent --from-beginning --bootstrap-server <MyComputerName>:9092","title":"Kafka Client"},{"location":"libraries/kafka/kafka/#kafka-client-library","text":"The Kafka Client in this repo consists of an ABL wrapper around the Kafka C++ Client (librdkafka.1.6.1) as well as other supporting classes. The code supports both Windows 64-bit and Linux.","title":"Kafka Client Library"},{"location":"libraries/kafka/kafka/#kafka-client","text":"The Kafka Client in this repository consists of an ABL wrapper around the Kafka C++ Client (librdkafka.1.6.1) as well as other supporting classes. The code supports both Windows 64-bit and Linux. Install the C++ client for the target operating system: The Kafka C++ Client can be obtained from NuGet the package: https://www.nuget.org/packages/librdkafka.redist/ nuget install librdkafka.redist -Version 1.6.1 For Windows, copy the following dlls into the root of the project: librdkafka.dll librdkafkacpp.dll libzstd.dll msvcp120.dll msvcr120.dll zlib.dll For Linux/Unix, copy the appropriate shared library for your flavor of OS. For example centos7-librdkafka.so .","title":"Kafka Client"},{"location":"libraries/kafka/kafka/#configuring-the-code","text":"The code will need to be configured to work with your unique environment. abl/kafka/librdkafka.cls : Adjust the path to where the Kafka libraries are stored (OS specific). &if opsys begins \"WIN\":u &then &scoped-define SharedLibrary Z:\\Development\\GitHub\\OpenABL\\librdkafka.dll &else &scoped-define SharedLibrary kafka/librdkafka.so &endif abl/kafka/unit/supporting/Configuration.cls : Make any desired changes, but bootstrap_servers must have the same value as the Kafka service. If using Docker as described below, use the same value as the KAFKA_ADVERTISED_LISTENERS=PLAINTEXT:// :9092 setting. bootstrap_servers = \"<kafka hostname>:9092\":u","title":"Configuring the Code"},{"location":"libraries/kafka/kafka/#kafka-using-docker-bitnami","text":"The following can be used to setup Docker containers for developing and testing the Kafka Client. Replace with either the name of the host/computer or use localhost. docker-compose.yml version: \"3\" services: zookeeper: image: 'bitnami/zookeeper:latest' ports: - '2181:2181' environment: - ALLOW_ANONYMOUS_LOGIN=yes kafka: image: 'bitnami/kafka:latest' ports: - '9092:9092' environment: - KAFKA_BROKER_ID=1 - KAFKA_LISTENERS=PLAINTEXT://:9092 - KAFKA_ADVERTISED_LISTENERS=PLAINTEXT://<MyComputerName>:9092 - KAFKA_ZOOKEEPER_CONNECT=zookeeper:2181 - ALLOW_PLAINTEXT_LISTENER=yes depends_on: - zookeeper To start the containers execute the following command in the same directory as the docker-compose.yml file: docker-compose up -d To stop the containers use the following command: docker-compose down","title":"Kafka using Docker (Bitnami)"},{"location":"libraries/kafka/kafka/#testing-kafka-using-console","text":"You can use the Kafka console client to produce and consume messages to confirm that Kafka is setup properly. To get access to the tools, download Kafka from the Apache website. You don't need to install or configuration anything, just execute the scripts below. Replace :9092 with the value used in the environment section in the docker-compose.yml file. Create a topic in Kafka. kafka-topics.sh --create --topic someevent --bootstrap-server <MyComputerName>:9092 Publish messages to Kafka topic someevent . Each line represents a message, use ctrl-c to stop publishing messages. kafka-console-producer.sh --topic someevent --bootstrap-server <MyComputerName>:9092 Consume message from the Kafka topic someevent . Use ctrl-c to stop consuming messages. kafka-console-consumer.sh --topic someevent --from-beginning --bootstrap-server <MyComputerName>:9092","title":"Testing Kafka using Console"},{"location":"libraries/kafka/understandingthecode/","text":"Understanding the Code \u00b6 The Kafka Client in this repo consists of an ABL wrapper around the Kafka C++ Client (librdkafka.1.6.1) as well as other supporting classes. The code supports both Windows 64-bit and Linux. The package abl.kafka.* contains all the source required to build a fully functional Kafka Client. The unit tests, abl.kafka.unit.* are intended to not only test the Kafka Client classes, but to also supply working implementations for some of the dependencies. Because of this, some of the unit tests are less unit tests and more functional tests. Kafka Client \u00b6 Package: abl.kafka Files Purpose Consumer.cls A class that implements IConsumer and consumes messages from a given Kafka topic. It has a dependency on KafkaClient, IConfiguration, and IMessageConsumer. IConfiguration.cls An interface that contains the configuration signatures for Kafka Client settings. IConsumer.cls An interface that contains the signatures for a Kafka consumer. IMessageConsumer.cls An interface that contains the signatures for consuming a Kafka message. IProducer.cls An interface that contains the signatures for a Kafka producer. KafkaClient.cls A class that inherits the primitive librdkafka wrapper class and is a facade for some of the more complex methods. librdkafka.cls A class that wraps a subset of the functions in the librdkafka Kakfa Client C++ library. The ultimate goal would be to wrap all functions, but some might not be supported by the AVM. Producer.cls A class that implements IProducer and publishes messages to Kafka. It has a dependency on KafkaClient and IConfiguration. Kafka Client Includes \u00b6 Package: abl.kafka.include Files Purpose rdkafka.i Preprocessor definitions for kafka data types. Derived from the C++ Kafka Client source file rdkafka.h. Kafka User Defined Types \u00b6 Package: abl.kafka.type Files Purpose KafkaMessage.cls User defined type describing a Kafka message. Contains the logic required to deserialize the memory pointer into easy to use ABL data types. Kafka Client Unit Tests \u00b6 Package: abl.kafka.unit Files Purpose utConsumer.cls A set of unit tests for abl.kafka.Consumer. utIConsumer.cls A set of abstract unit tests that should be written when unit testing an implementation of abl.kafka.IConsumer. utIMessageConsumer.cls A set of abstract unit tests that should be written when unit testing an implementation of abl.kafka.IMessageConsumer. utIProducer.cls A set of abstract unit tests that should be written when unit testing an implementation of abl.kafka.IProducer. utKafkaClient.cls A set of unit tests for abl.kafka.KafkaClient. utlibrdkafka.cls A set of unit tests for abl.kafka.librdkafka. utProducer.cls A set of unit tests for abl.kafka.Producer. Kafka Unit Test Support \u00b6 Package: abl.kafka.unit.supporting Files Purpose Configuration.cls Sample implementation of abl.kafka.IConfiguration that is used for unit testing. MessageConsumer.cls Sample implementation of abl.kafka.IMessageConsumer that is used for unit testing. utSettings.i Preprocessor definitions required for Unit Testing. Coding Examples \u00b6 Getting the Kafka Client Version \u00b6 define variable oKafkaClient as abl . kafka . KafkaClient no-undo . oKafkaClient = new abl . kafka . KafkaClient (). message \"Kafka Client Version:\" oKafkaClient : rd_kafka_version_string () view-as alert-box . return . finally : delete object oKafkaClient no-error . end finally . Produce a Message \u00b6 define variable oKafkaProducer as abl . kafka . IProducer no-undo . oKafkaProducer = new abl . kafka . Producer ( new abl . kafka . unit . supporting . Configuration ()). oKafkaProducer : Produce ( \"unittestevent\" : u, substitute ( \"Sending a message &1...\" : u, now )). return . finally : delete object oKafkaProducer no-error . end finally . Consume a Message \u00b6 define variable oKafkaConsumer as abl . kafka . IConsumer no-undo . oKafkaConsumer = new abl . kafka . Consumer ( new abl . kafka . unit . supporting . Configuration ()). oKafkaConsumer : CreateStopFile (). oKafkaConsumer : Consume ( \"unittestevent\" : u, new abl . kafka . unit . supporting . MessageConsumer ()). return . finally : delete object oKafkaConsumer no-error . end finally .","title":"Understanding the Code"},{"location":"libraries/kafka/understandingthecode/#understanding-the-code","text":"The Kafka Client in this repo consists of an ABL wrapper around the Kafka C++ Client (librdkafka.1.6.1) as well as other supporting classes. The code supports both Windows 64-bit and Linux. The package abl.kafka.* contains all the source required to build a fully functional Kafka Client. The unit tests, abl.kafka.unit.* are intended to not only test the Kafka Client classes, but to also supply working implementations for some of the dependencies. Because of this, some of the unit tests are less unit tests and more functional tests.","title":"Understanding the Code"},{"location":"libraries/kafka/understandingthecode/#kafka-client","text":"Package: abl.kafka Files Purpose Consumer.cls A class that implements IConsumer and consumes messages from a given Kafka topic. It has a dependency on KafkaClient, IConfiguration, and IMessageConsumer. IConfiguration.cls An interface that contains the configuration signatures for Kafka Client settings. IConsumer.cls An interface that contains the signatures for a Kafka consumer. IMessageConsumer.cls An interface that contains the signatures for consuming a Kafka message. IProducer.cls An interface that contains the signatures for a Kafka producer. KafkaClient.cls A class that inherits the primitive librdkafka wrapper class and is a facade for some of the more complex methods. librdkafka.cls A class that wraps a subset of the functions in the librdkafka Kakfa Client C++ library. The ultimate goal would be to wrap all functions, but some might not be supported by the AVM. Producer.cls A class that implements IProducer and publishes messages to Kafka. It has a dependency on KafkaClient and IConfiguration.","title":"Kafka Client"},{"location":"libraries/kafka/understandingthecode/#kafka-client-includes","text":"Package: abl.kafka.include Files Purpose rdkafka.i Preprocessor definitions for kafka data types. Derived from the C++ Kafka Client source file rdkafka.h.","title":"Kafka Client Includes"},{"location":"libraries/kafka/understandingthecode/#kafka-user-defined-types","text":"Package: abl.kafka.type Files Purpose KafkaMessage.cls User defined type describing a Kafka message. Contains the logic required to deserialize the memory pointer into easy to use ABL data types.","title":"Kafka User Defined Types"},{"location":"libraries/kafka/understandingthecode/#kafka-client-unit-tests","text":"Package: abl.kafka.unit Files Purpose utConsumer.cls A set of unit tests for abl.kafka.Consumer. utIConsumer.cls A set of abstract unit tests that should be written when unit testing an implementation of abl.kafka.IConsumer. utIMessageConsumer.cls A set of abstract unit tests that should be written when unit testing an implementation of abl.kafka.IMessageConsumer. utIProducer.cls A set of abstract unit tests that should be written when unit testing an implementation of abl.kafka.IProducer. utKafkaClient.cls A set of unit tests for abl.kafka.KafkaClient. utlibrdkafka.cls A set of unit tests for abl.kafka.librdkafka. utProducer.cls A set of unit tests for abl.kafka.Producer.","title":"Kafka Client Unit Tests"},{"location":"libraries/kafka/understandingthecode/#kafka-unit-test-support","text":"Package: abl.kafka.unit.supporting Files Purpose Configuration.cls Sample implementation of abl.kafka.IConfiguration that is used for unit testing. MessageConsumer.cls Sample implementation of abl.kafka.IMessageConsumer that is used for unit testing. utSettings.i Preprocessor definitions required for Unit Testing.","title":"Kafka Unit Test Support"},{"location":"libraries/kafka/understandingthecode/#coding-examples","text":"","title":"Coding Examples"},{"location":"libraries/kafka/understandingthecode/#getting-the-kafka-client-version","text":"define variable oKafkaClient as abl . kafka . KafkaClient no-undo . oKafkaClient = new abl . kafka . KafkaClient (). message \"Kafka Client Version:\" oKafkaClient : rd_kafka_version_string () view-as alert-box . return . finally : delete object oKafkaClient no-error . end finally .","title":"Getting the Kafka Client Version"},{"location":"libraries/kafka/understandingthecode/#produce-a-message","text":"define variable oKafkaProducer as abl . kafka . IProducer no-undo . oKafkaProducer = new abl . kafka . Producer ( new abl . kafka . unit . supporting . Configuration ()). oKafkaProducer : Produce ( \"unittestevent\" : u, substitute ( \"Sending a message &1...\" : u, now )). return . finally : delete object oKafkaProducer no-error . end finally .","title":"Produce a Message"},{"location":"libraries/kafka/understandingthecode/#consume-a-message","text":"define variable oKafkaConsumer as abl . kafka . IConsumer no-undo . oKafkaConsumer = new abl . kafka . Consumer ( new abl . kafka . unit . supporting . Configuration ()). oKafkaConsumer : CreateStopFile (). oKafkaConsumer : Consume ( \"unittestevent\" : u, new abl . kafka . unit . supporting . MessageConsumer ()). return . finally : delete object oKafkaConsumer no-error . end finally .","title":"Consume a Message"},{"location":"libraries/system/system/","text":"System Library \u00b6 The system library adds operating system level functionality to the ABL language. Computer \u00b6 The Computer class adds computer/host level functionality to the ABL language. Hostname \u00b6 Returns the current computer/host name. abl . system . Computer : Hostname () File \u00b6 The File class adds file level functionality to the ABL language. OpenFile \u00b6 Opens the file using the default application (Windows only) . abl . system . File : OpenFile ( session : temp-directory + \"LogFile.log\" : u ). Process \u00b6 The Process class adds process level functionality to the ABL language. CurrentPID \u00b6 Returns the Process ID for the current ABL session. abl . system . Process : CurrentPID () Nap \u00b6 Cause the current process to sleep for a specific number of milliseconds. abl . system . Process : Nap ( 500 ).","title":"System"},{"location":"libraries/system/system/#system-library","text":"The system library adds operating system level functionality to the ABL language.","title":"System Library"},{"location":"libraries/system/system/#computer","text":"The Computer class adds computer/host level functionality to the ABL language.","title":"Computer"},{"location":"libraries/system/system/#hostname","text":"Returns the current computer/host name. abl . system . Computer : Hostname ()","title":"Hostname"},{"location":"libraries/system/system/#file","text":"The File class adds file level functionality to the ABL language.","title":"File"},{"location":"libraries/system/system/#openfile","text":"Opens the file using the default application (Windows only) . abl . system . File : OpenFile ( session : temp-directory + \"LogFile.log\" : u ).","title":"OpenFile"},{"location":"libraries/system/system/#process","text":"The Process class adds process level functionality to the ABL language.","title":"Process"},{"location":"libraries/system/system/#currentpid","text":"Returns the Process ID for the current ABL session. abl . system . Process : CurrentPID ()","title":"CurrentPID"},{"location":"libraries/system/system/#nap","text":"Cause the current process to sleep for a specific number of milliseconds. abl . system . Process : Nap ( 500 ).","title":"Nap"}]}
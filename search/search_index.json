{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Open ABL Project \u00b6 Objective \u00b6 Supply OpenEdge ABL Libraries to extent OpenEdge capabilities. Source Code \u00b6 Source code for the various libraries can be found in the src folder . Code is organized in two primary folders, abl and test . The abl folder contains the libraries in their most basic form. These libraries should be supported in any ABL application (Linux and Windows). If the libraries require application level implementations to be injected, examples will be found in test . The test folder contains implementations or examples of using the libraries found in abl . Documentation \u00b6 The source of the documentation, found in the doc folder , is written using Markdown and compiled by MkDocs. The compiled source is hosted in GitHub pages. How to Contribute \u00b6 Its easy to contribute to the Open ABL Project. You can modify and add libraries by making pull requests or just open an issue.","title":"Home"},{"location":"#open-abl-project","text":"","title":"Open ABL Project"},{"location":"#objective","text":"Supply OpenEdge ABL Libraries to extent OpenEdge capabilities.","title":"Objective"},{"location":"#source-code","text":"Source code for the various libraries can be found in the src folder . Code is organized in two primary folders, abl and test . The abl folder contains the libraries in their most basic form. These libraries should be supported in any ABL application (Linux and Windows). If the libraries require application level implementations to be injected, examples will be found in test . The test folder contains implementations or examples of using the libraries found in abl .","title":"Source Code"},{"location":"#documentation","text":"The source of the documentation, found in the doc folder , is written using Markdown and compiled by MkDocs. The compiled source is hosted in GitHub pages.","title":"Documentation"},{"location":"#how-to-contribute","text":"Its easy to contribute to the Open ABL Project. You can modify and add libraries by making pull requests or just open an issue.","title":"How to Contribute"},{"location":"contributing/HowToContribute/","text":"How to Contribute \u00b6 Contributing to Source Code \u00b6 Open a GitHub Issue in the repository to start a discussion. Pull the GitHub Repository and make a pull request with your changes. I will review your changes and respond. Contributing to the Documentation \u00b6 Once you've pulled the MkDocs and Materials container, pull the GitHub Repository and use the the following commands to preview the site locally in your browser. MacOS/Linux cd /<repo-location> docker run --rm -it -p 8000:8000 -v ${PWD}:/docs squidfunk/mkdocs-material or if using the optional Shortcut Scripts cd /<repo-location> md serve Windows cd /<repo-location> docker run --rm -it -p 8000:8000 -v \"%cd%\":/docs squidfunk/mkdocs-material or if using the optional shortcut scripts cd /<repo-location> mk serve","title":"How to Contribute"},{"location":"contributing/HowToContribute/#how-to-contribute","text":"","title":"How to Contribute"},{"location":"contributing/HowToContribute/#contributing-to-source-code","text":"Open a GitHub Issue in the repository to start a discussion. Pull the GitHub Repository and make a pull request with your changes. I will review your changes and respond.","title":"Contributing to Source Code"},{"location":"contributing/HowToContribute/#contributing-to-the-documentation","text":"Once you've pulled the MkDocs and Materials container, pull the GitHub Repository and use the the following commands to preview the site locally in your browser. MacOS/Linux cd /<repo-location> docker run --rm -it -p 8000:8000 -v ${PWD}:/docs squidfunk/mkdocs-material or if using the optional Shortcut Scripts cd /<repo-location> md serve Windows cd /<repo-location> docker run --rm -it -p 8000:8000 -v \"%cd%\":/docs squidfunk/mkdocs-material or if using the optional shortcut scripts cd /<repo-location> mk serve","title":"Contributing to the Documentation"},{"location":"contributing/MkDocsDocker/","text":"MkDocs and Material using Docker \u00b6 MkDocs and Material using Docker containers and commands. Get the Docker Image \u00b6 The official Docker is a great way to get up and running in a few minutes, as it comes with all dependencies pre-installed. Pull the image for the latest version with: docker pull squidfunk/mkdocs-material Verifying MkDocs/Docker Image \u00b6 To verify that the MkDocs/Docker images in the previous step works, you can check the version of MkDocs using the following command: MacOS/Linux docker run --rm -it -v ${PWD}:/docs squidfunk/mkdocs-material --version Results of the call will depend on the version contained in the current Docker container. mkdocs, version 1.1.2 from /usr/local/lib/mkdocs (Python 3.8) Windows docker run --rm -it -v \"%cd%\":/docs squidfunk/mkdocs-material --version Results of the call will depend on the version contained in the current Docker container. mkdocs, version 1.1.2 from c:\\local\\python\\mkdocs (Python 3.8) Creating a New Site \u00b6 You can bootstrap your project documentation using the mkdocs executable. Go to the directory where you want your project to be located and enter: MacOS/Linux docker run --rm -it -v ${PWD}:/docs squidfunk/mkdocs-material new . Windows docker run --rm -it -v \"%cd%\":/docs squidfunk/mkdocs-material new . This will create the following structure: . \u251c\u2500 docs/ \u2502 \u2514\u2500 index.md \u2514\u2500 mkdocs.yml Previewing Documentation as it's Written \u00b6 MkDocs includes a live preview server, so you can preview your changes as you write your documentation. The server will automatically rebuild the site upon saving and reload within the browser. Start it with: MacOS/Linux docker run --rm -it -p 8000:8000 -v ${PWD}:/docs squidfunk/mkdocs-material Windows docker run --rm -it -p 8000:8000 -v \"%cd%\":/docs squidfunk/mkdocs-material Point your browser to http://localhost:8000 to see the compiled documentation. Use CTRL/Control-C to stop the server when done. Building Documentation \u00b6 When you're finished editing, you can build a static site from your Markdown files with: MacOS/Linux docker run --rm -it -v ${PWD}:/docs squidfunk/mkdocs-material build Windows docker run --rm -it -v \"%cd%\":/docs squidfunk/mkdocs-material build The contents of this directory (./site) make up your project documentation. The site can be hosted on GitHub Pages, GitLab Pages, a CDN of your choice or your private web server. Deploy Documentation (GitHub Pages) \u00b6 Manually deploy project documentation invoke the following command from the directory containing the mkdocs.yml file: MacOS/Linux docker run --rm -it -v ~/.ssh:/root/.ssh -v ${PWD}:/docs squidfunk/mkdocs-material gh-deploy --force Windows docker run --rm -it -v ~/.ssh:/root/.ssh -v \"%cd%\":/docs squidfunk/mkdocs-material gh-deploy --force Using Shortcut Script \u00b6 The commands above are verbose and cumbersome to type. To alleviate this pain, scripts can be used to supply shortcuts. Below are scripts for both MacOS and Windows. The scripts can be named whatever is memorable but will need to be adjusted to reflect that name for the help option. The OS specific script needs to be placed in the sessions PATH. These scripts can be expanded or modified to allow more MkDoc features, but the basics are already supplied. MacOS/Linux #!/bin/sh COMMAND=\"$1\" OPTIONS=\"$2 $3 $4 $5 $6\" case $COMMAND in version) docker run --rm -it -v ${PWD}:/docs squidfunk/mkdocs-material --version ;; serve) docker run --rm -it -p 8000:8000 -v ${PWD}:/docs squidfunk/mkdocs-material ;; build) docker run --rm -it -v ${PWD}:/docs squidfunk/mkdocs-material build $OPTIONS ;; deploy) docker run --rm -it -v ~/.ssh:/root/.ssh -v ${PWD}:/docs squidfunk/mkdocs-material gh-deploy --force ;; new) docker run --rm -it -v ${PWD}:/docs squidfunk/mkdocs-material new . ;; * ) echo \"\\033[1mNAME\\033[0m\" echo \" \\033[1mmd\\033[0m - Command shortcut for MkDocs running under Docker\" echo \"\" echo \"\\033[1mSYNOPSIS\\033[0m\" echo \" \\033[1mmd\\033[0m \\033[4mcommand\\033[0m\" echo \"\" echo \"\\033[1mCOMMANDS\\033[0m\" echo \" Supply one of the following commands to:\" echo \" \\033[1mhelp\\033[0m - Display this helpful information\" echo \" \\033[1mversion\\033[0m - Display MkDocs version information\" echo \" \\033[1mserve\\033[0m - Run the built-in development server (http://localhost:8000) for the current directory (control-c will stop the server)\" echo \" \\033[1mbuild\\033[0m - Build the MkDocs documentation in the current directory\" echo \" \\033[1mdeploy\\033[0m - Deploy documentation to GitHub Pages from the current directory\" echo \" \\033[1mnew\\033[0m - Create a new MkDocs project in the current directory\" echo \"\" exit 1 ;; esac Windows @echo off setlocal set OPTION=%1 IF \"%OPTION%\"==\"version\" ( docker run --rm -it -v %cd%:/docs squidfunk/mkdocs-material --version ) ELSE IF \"%OPTION%\"==\"serve\" ( docker run --rm -it -p 8000:8000 -v %cd%:/docs squidfunk/mkdocs-material ) ELSE IF \"%OPTION%\"==\"build\" ( docker run --rm -it -v %cd%:/docs squidfunk/mkdocs-material build ) ELSE IF \"%OPTION%\"==\"deploy\" ( docker run --rm -it -v ~/.ssh:/root/.ssh -v %cd%:/docs squidfunk/mkdocs-material gh-deploy --force ) ELSE IF \"%OPTION%\"==\"new\" ( docker run --rm -it -v %cd%:/docs squidfunk/mkdocs-material new . ) ELSE ( echo NAME echo mk - Command shortcut for MkDocs running under Docker echo. echo SYNOPSIS echo mk option echo. echo OPTIONS echo Supply one of the following options to: echo help - Display this helpful information echo version - Display MkDocs version information echo serve - Run the built-in development server (http://localhost:8000) for the current directory (ctrl-c will stop the server) echo build - Build the MkDocs documentation in the current directory echo deploy - Deploy documentation to GitHub Pages from the current directory echo new - Create a new MkDocs project in the current directory echo. ) goto :eof The following is the syntax to use the scripts defined above. The MacOS version fo the script is named md , however the Windows version is named mk .bat because it confliced with the Windows MD (MKDIR) command. MacOS/Linux NAME md - Command shortcut for MkDocs running under Docker SYNOPSIS md option (e.g. md serve) OPTIONS Supply one of the following options to: help - Display this helpful information version - Display MkDocs version information serve - Run the built-in development server (http://localhost:8000) for the current directory (control-c will stop the server) build - Build the MkDocs documentation in the current directory deploy - Deploy documentation to GitHub Pages from the current directory new - Create a new MkDocs project in the current directory Windows NAME mk - Command shortcut for MkDocs running under Docker SYNOPSIS mk option (e.g. mk serve) OPTIONS Supply one of the following options to: help - Display this helpful information version - Display MkDocs version information serve - Run the built-in development server (http://localhost:8000) for the current directory (control-c will stop the server) build - Build the MkDocs documentation in the current directory deploy - Deploy documentation to GitHub Pages from the current directory new - Create a new MkDocs project in the current directory","title":"MkDocs Docker"},{"location":"contributing/MkDocsDocker/#mkdocs-and-material-using-docker","text":"MkDocs and Material using Docker containers and commands.","title":"MkDocs and Material using Docker"},{"location":"contributing/MkDocsDocker/#get-the-docker-image","text":"The official Docker is a great way to get up and running in a few minutes, as it comes with all dependencies pre-installed. Pull the image for the latest version with: docker pull squidfunk/mkdocs-material","title":"Get the Docker Image"},{"location":"contributing/MkDocsDocker/#verifying-mkdocsdocker-image","text":"To verify that the MkDocs/Docker images in the previous step works, you can check the version of MkDocs using the following command: MacOS/Linux docker run --rm -it -v ${PWD}:/docs squidfunk/mkdocs-material --version Results of the call will depend on the version contained in the current Docker container. mkdocs, version 1.1.2 from /usr/local/lib/mkdocs (Python 3.8) Windows docker run --rm -it -v \"%cd%\":/docs squidfunk/mkdocs-material --version Results of the call will depend on the version contained in the current Docker container. mkdocs, version 1.1.2 from c:\\local\\python\\mkdocs (Python 3.8)","title":"Verifying MkDocs/Docker Image"},{"location":"contributing/MkDocsDocker/#creating-a-new-site","text":"You can bootstrap your project documentation using the mkdocs executable. Go to the directory where you want your project to be located and enter: MacOS/Linux docker run --rm -it -v ${PWD}:/docs squidfunk/mkdocs-material new . Windows docker run --rm -it -v \"%cd%\":/docs squidfunk/mkdocs-material new . This will create the following structure: . \u251c\u2500 docs/ \u2502 \u2514\u2500 index.md \u2514\u2500 mkdocs.yml","title":"Creating a New Site"},{"location":"contributing/MkDocsDocker/#previewing-documentation-as-its-written","text":"MkDocs includes a live preview server, so you can preview your changes as you write your documentation. The server will automatically rebuild the site upon saving and reload within the browser. Start it with: MacOS/Linux docker run --rm -it -p 8000:8000 -v ${PWD}:/docs squidfunk/mkdocs-material Windows docker run --rm -it -p 8000:8000 -v \"%cd%\":/docs squidfunk/mkdocs-material Point your browser to http://localhost:8000 to see the compiled documentation. Use CTRL/Control-C to stop the server when done.","title":"Previewing Documentation as it's Written"},{"location":"contributing/MkDocsDocker/#building-documentation","text":"When you're finished editing, you can build a static site from your Markdown files with: MacOS/Linux docker run --rm -it -v ${PWD}:/docs squidfunk/mkdocs-material build Windows docker run --rm -it -v \"%cd%\":/docs squidfunk/mkdocs-material build The contents of this directory (./site) make up your project documentation. The site can be hosted on GitHub Pages, GitLab Pages, a CDN of your choice or your private web server.","title":"Building Documentation"},{"location":"contributing/MkDocsDocker/#deploy-documentation-github-pages","text":"Manually deploy project documentation invoke the following command from the directory containing the mkdocs.yml file: MacOS/Linux docker run --rm -it -v ~/.ssh:/root/.ssh -v ${PWD}:/docs squidfunk/mkdocs-material gh-deploy --force Windows docker run --rm -it -v ~/.ssh:/root/.ssh -v \"%cd%\":/docs squidfunk/mkdocs-material gh-deploy --force","title":"Deploy Documentation (GitHub Pages)"},{"location":"contributing/MkDocsDocker/#using-shortcut-script","text":"The commands above are verbose and cumbersome to type. To alleviate this pain, scripts can be used to supply shortcuts. Below are scripts for both MacOS and Windows. The scripts can be named whatever is memorable but will need to be adjusted to reflect that name for the help option. The OS specific script needs to be placed in the sessions PATH. These scripts can be expanded or modified to allow more MkDoc features, but the basics are already supplied. MacOS/Linux #!/bin/sh COMMAND=\"$1\" OPTIONS=\"$2 $3 $4 $5 $6\" case $COMMAND in version) docker run --rm -it -v ${PWD}:/docs squidfunk/mkdocs-material --version ;; serve) docker run --rm -it -p 8000:8000 -v ${PWD}:/docs squidfunk/mkdocs-material ;; build) docker run --rm -it -v ${PWD}:/docs squidfunk/mkdocs-material build $OPTIONS ;; deploy) docker run --rm -it -v ~/.ssh:/root/.ssh -v ${PWD}:/docs squidfunk/mkdocs-material gh-deploy --force ;; new) docker run --rm -it -v ${PWD}:/docs squidfunk/mkdocs-material new . ;; * ) echo \"\\033[1mNAME\\033[0m\" echo \" \\033[1mmd\\033[0m - Command shortcut for MkDocs running under Docker\" echo \"\" echo \"\\033[1mSYNOPSIS\\033[0m\" echo \" \\033[1mmd\\033[0m \\033[4mcommand\\033[0m\" echo \"\" echo \"\\033[1mCOMMANDS\\033[0m\" echo \" Supply one of the following commands to:\" echo \" \\033[1mhelp\\033[0m - Display this helpful information\" echo \" \\033[1mversion\\033[0m - Display MkDocs version information\" echo \" \\033[1mserve\\033[0m - Run the built-in development server (http://localhost:8000) for the current directory (control-c will stop the server)\" echo \" \\033[1mbuild\\033[0m - Build the MkDocs documentation in the current directory\" echo \" \\033[1mdeploy\\033[0m - Deploy documentation to GitHub Pages from the current directory\" echo \" \\033[1mnew\\033[0m - Create a new MkDocs project in the current directory\" echo \"\" exit 1 ;; esac Windows @echo off setlocal set OPTION=%1 IF \"%OPTION%\"==\"version\" ( docker run --rm -it -v %cd%:/docs squidfunk/mkdocs-material --version ) ELSE IF \"%OPTION%\"==\"serve\" ( docker run --rm -it -p 8000:8000 -v %cd%:/docs squidfunk/mkdocs-material ) ELSE IF \"%OPTION%\"==\"build\" ( docker run --rm -it -v %cd%:/docs squidfunk/mkdocs-material build ) ELSE IF \"%OPTION%\"==\"deploy\" ( docker run --rm -it -v ~/.ssh:/root/.ssh -v %cd%:/docs squidfunk/mkdocs-material gh-deploy --force ) ELSE IF \"%OPTION%\"==\"new\" ( docker run --rm -it -v %cd%:/docs squidfunk/mkdocs-material new . ) ELSE ( echo NAME echo mk - Command shortcut for MkDocs running under Docker echo. echo SYNOPSIS echo mk option echo. echo OPTIONS echo Supply one of the following options to: echo help - Display this helpful information echo version - Display MkDocs version information echo serve - Run the built-in development server (http://localhost:8000) for the current directory (ctrl-c will stop the server) echo build - Build the MkDocs documentation in the current directory echo deploy - Deploy documentation to GitHub Pages from the current directory echo new - Create a new MkDocs project in the current directory echo. ) goto :eof The following is the syntax to use the scripts defined above. The MacOS version fo the script is named md , however the Windows version is named mk .bat because it confliced with the Windows MD (MKDIR) command. MacOS/Linux NAME md - Command shortcut for MkDocs running under Docker SYNOPSIS md option (e.g. md serve) OPTIONS Supply one of the following options to: help - Display this helpful information version - Display MkDocs version information serve - Run the built-in development server (http://localhost:8000) for the current directory (control-c will stop the server) build - Build the MkDocs documentation in the current directory deploy - Deploy documentation to GitHub Pages from the current directory new - Create a new MkDocs project in the current directory Windows NAME mk - Command shortcut for MkDocs running under Docker SYNOPSIS mk option (e.g. mk serve) OPTIONS Supply one of the following options to: help - Display this helpful information version - Display MkDocs version information serve - Run the built-in development server (http://localhost:8000) for the current directory (control-c will stop the server) build - Build the MkDocs documentation in the current directory deploy - Deploy documentation to GitHub Pages from the current directory new - Create a new MkDocs project in the current directory","title":"Using Shortcut Script"},{"location":"libraries/kafka/","text":"Kafka Client Library \u00b6 Objective \u00b6 The Kafka Client in this repo consists of an ABL wrapper around the Kafka C++ Client (librdkafka.1.6.1) as well as other supporting classes. The code supports both Windows 64-bit and Linux. Kafka Client \u00b6 The Kafka Client in this repo consists of an ABL wrapper around the Kafka C++ Client (librdkafka.1.6.1) as well as other supporting classes. The code supports both Windows 64-bit and Linux. The Kafka C++ Client can be obtained from NuGet the package: https://www.nuget.org/packages/librdkafka.redist/ nuget install librdkafka.redist -Version 1.6.1 Kafka using Docker \u00b6 I used the following to setup Docker containers for developing and testing the Kafka Client. Replace with either your computer name or localhost. I use my Macbook's name instead of localhost because I'm running PDSOE in a VM. docker-compose.yml version: \"3\" services: zookeeper: image: 'bitnami/zookeeper:latest' ports: - '2181:2181' environment: - ALLOW_ANONYMOUS_LOGIN=yes kafka: image: 'bitnami/kafka:latest' ports: - '9092:9092' environment: - KAFKA_BROKER_ID=1 - KAFKA_LISTENERS=PLAINTEXT://:9092 - KAFKA_ADVERTISED_LISTENERS=PLAINTEXT://<MyComputerName>:9092 - KAFKA_ZOOKEEPER_CONNECT=zookeeper:2181 - ALLOW_PLAINTEXT_LISTENER=yes depends_on: - zookeeper Using the Kafka Console \u00b6 You can use the Kafka console client to produce and consume messages to confirm that Kafka is setup properly. To get access to the tools, download Kafka from the Apache website. You don't need to install or configuration anything, just execute the scripts below. Replace localhost:9092 with the value used in the environment section in the docker-compose.yml file. kafka-topics.sh --create --topic someevent --bootstrap-server localhost:9092 kafka-console-producer.sh --topic someevent --bootstrap-server localhost:9092 kafka-console-consumer.sh --topic someevent --from-beginning --bootstrap-server localhost:9092","title":"Kafka"},{"location":"libraries/kafka/#kafka-client-library","text":"","title":"Kafka Client Library"},{"location":"libraries/kafka/#objective","text":"The Kafka Client in this repo consists of an ABL wrapper around the Kafka C++ Client (librdkafka.1.6.1) as well as other supporting classes. The code supports both Windows 64-bit and Linux.","title":"Objective"},{"location":"libraries/kafka/#kafka-client","text":"The Kafka Client in this repo consists of an ABL wrapper around the Kafka C++ Client (librdkafka.1.6.1) as well as other supporting classes. The code supports both Windows 64-bit and Linux. The Kafka C++ Client can be obtained from NuGet the package: https://www.nuget.org/packages/librdkafka.redist/ nuget install librdkafka.redist -Version 1.6.1","title":"Kafka Client"},{"location":"libraries/kafka/#kafka-using-docker","text":"I used the following to setup Docker containers for developing and testing the Kafka Client. Replace with either your computer name or localhost. I use my Macbook's name instead of localhost because I'm running PDSOE in a VM. docker-compose.yml version: \"3\" services: zookeeper: image: 'bitnami/zookeeper:latest' ports: - '2181:2181' environment: - ALLOW_ANONYMOUS_LOGIN=yes kafka: image: 'bitnami/kafka:latest' ports: - '9092:9092' environment: - KAFKA_BROKER_ID=1 - KAFKA_LISTENERS=PLAINTEXT://:9092 - KAFKA_ADVERTISED_LISTENERS=PLAINTEXT://<MyComputerName>:9092 - KAFKA_ZOOKEEPER_CONNECT=zookeeper:2181 - ALLOW_PLAINTEXT_LISTENER=yes depends_on: - zookeeper","title":"Kafka using Docker"},{"location":"libraries/kafka/#using-the-kafka-console","text":"You can use the Kafka console client to produce and consume messages to confirm that Kafka is setup properly. To get access to the tools, download Kafka from the Apache website. You don't need to install or configuration anything, just execute the scripts below. Replace localhost:9092 with the value used in the environment section in the docker-compose.yml file. kafka-topics.sh --create --topic someevent --bootstrap-server localhost:9092 kafka-console-producer.sh --topic someevent --bootstrap-server localhost:9092 kafka-console-consumer.sh --topic someevent --from-beginning --bootstrap-server localhost:9092","title":"Using the Kafka Console"},{"location":"libraries/system/","text":"System Library \u00b6 Objective \u00b6 System library add operating system level functionality to the ABL language. File \u00b6 The File library adds ... abl . system . File : OpenFile ( session : temp-directory + \"LogFile.log\" : u ). Process \u00b6","title":"System"},{"location":"libraries/system/#system-library","text":"","title":"System Library"},{"location":"libraries/system/#objective","text":"System library add operating system level functionality to the ABL language.","title":"Objective"},{"location":"libraries/system/#file","text":"The File library adds ... abl . system . File : OpenFile ( session : temp-directory + \"LogFile.log\" : u ).","title":"File"},{"location":"libraries/system/#process","text":"","title":"Process"}]}